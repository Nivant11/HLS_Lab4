// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module initialize_padded_memory_16_10_0_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_we0,
        input_r_d0,
        input_r_q0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] input_r_address0;
output   input_r_ce0;
output   input_r_we0;
output  [15:0] input_r_d0;
input  [15:0] input_r_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[6:0] input_r_address0;
reg input_r_ce0;
reg input_r_we0;
reg[15:0] input_r_d0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] m_fu_96_p2;
reg   [4:0] m_reg_187;
wire    ap_CS_fsm_state2;
wire   [5:0] zext_ln46_fu_102_p1;
reg   [5:0] zext_ln46_reg_192;
wire   [0:0] icmp_ln41_fu_90_p2;
wire   [3:0] x_fu_112_p2;
reg   [3:0] x_reg_200;
wire    ap_CS_fsm_state3;
wire   [7:0] add_ln46_fu_142_p2;
reg   [7:0] add_ln46_reg_205;
wire   [0:0] icmp_ln43_fu_106_p2;
wire   [3:0] y_fu_154_p2;
reg   [3:0] y_reg_213;
wire    ap_CS_fsm_state4;
reg   [6:0] input_addr_reg_218;
wire   [0:0] icmp_ln45_fu_148_p2;
reg   [4:0] m_0_reg_57;
reg   [3:0] x_0_reg_68;
reg   [3:0] y_0_reg_79;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln46_4_fu_169_p1;
wire   [6:0] tmp_16_fu_118_p3;
wire   [4:0] tmp_17_fu_130_p3;
wire   [7:0] zext_ln46_2_fu_138_p1;
wire   [7:0] zext_ln46_1_fu_126_p1;
wire   [7:0] zext_ln46_3_fu_160_p1;
wire   [7:0] add_ln46_1_fu_164_p2;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln43_fu_106_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        m_0_reg_57 <= m_reg_187;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        m_0_reg_57 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_fu_148_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        x_0_reg_68 <= x_reg_200;
    end else if (((icmp_ln41_fu_90_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        x_0_reg_68 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        y_0_reg_79 <= y_reg_213;
    end else if (((icmp_ln43_fu_106_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        y_0_reg_79 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln43_fu_106_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        add_ln46_reg_205[7 : 1] <= add_ln46_fu_142_p2[7 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_fu_148_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        input_addr_reg_218 <= zext_ln46_4_fu_169_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        m_reg_187 <= m_fu_96_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        x_reg_200 <= x_fu_112_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        y_reg_213 <= y_fu_154_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln41_fu_90_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln46_reg_192[4 : 0] <= zext_ln46_fu_102_p1[4 : 0];
    end
end

always @ (*) begin
    if ((((icmp_ln41_fu_90_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln41_fu_90_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_r_address0 = input_addr_reg_218;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        input_r_address0 = zext_ln46_4_fu_169_p1;
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_r_we0 = 1'b1;
    end else begin
        input_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln41_fu_90_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln43_fu_106_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln45_fu_148_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln46_1_fu_164_p2 = (add_ln46_reg_205 + zext_ln46_3_fu_160_p1);

assign add_ln46_fu_142_p2 = (zext_ln46_2_fu_138_p1 + zext_ln46_1_fu_126_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign icmp_ln41_fu_90_p2 = ((m_0_reg_57 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_106_p2 = ((x_0_reg_68 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln45_fu_148_p2 = ((y_0_reg_79 == 4'd10) ? 1'b1 : 1'b0);

always @ (*) begin
    input_r_d0 = input_r_q0;
    input_r_d0[zext_ln46_reg_192] = |(1'd0);
end

assign m_fu_96_p2 = (m_0_reg_57 + 5'd1);

assign tmp_16_fu_118_p3 = {{x_0_reg_68}, {3'd0}};

assign tmp_17_fu_130_p3 = {{x_0_reg_68}, {1'd0}};

assign x_fu_112_p2 = (x_0_reg_68 + 4'd1);

assign y_fu_154_p2 = (y_0_reg_79 + 4'd1);

assign zext_ln46_1_fu_126_p1 = tmp_16_fu_118_p3;

assign zext_ln46_2_fu_138_p1 = tmp_17_fu_130_p3;

assign zext_ln46_3_fu_160_p1 = y_0_reg_79;

assign zext_ln46_4_fu_169_p1 = add_ln46_1_fu_164_p2;

assign zext_ln46_fu_102_p1 = m_0_reg_57;

always @ (posedge ap_clk) begin
    zext_ln46_reg_192[5] <= 1'b0;
    add_ln46_reg_205[0] <= 1'b0;
end

endmodule //initialize_padded_memory_16_10_0_s
