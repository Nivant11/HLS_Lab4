// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module max_pool_32_8_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        input_r_address1,
        input_r_ce1,
        input_r_q1,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        output_r_q0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [5:0] input_r_address1;
output   input_r_ce1;
input  [31:0] input_r_q1;
output  [3:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
input  [31:0] output_r_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] input_r_address0;
reg input_r_ce0;
reg[5:0] input_r_address1;
reg input_r_ce1;
reg[3:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[31:0] output_r_d0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [9:0] indvar_flatten21_reg_122;
reg   [5:0] m_0_reg_133;
reg   [5:0] indvar_flatten_reg_145;
reg   [2:0] x_0_reg_156;
reg   [2:0] y_0_reg_167;
wire   [0:0] icmp_ln97_fu_190_p2;
reg   [0:0] icmp_ln97_reg_479;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [9:0] add_ln97_fu_196_p2;
reg   [9:0] add_ln97_reg_483;
reg    ap_enable_reg_pp0_iter0;
wire   [5:0] m_fu_202_p2;
reg   [5:0] m_reg_488;
wire   [0:0] icmp_ln99_fu_208_p2;
reg   [0:0] icmp_ln99_reg_493;
wire   [2:0] select_ln110_fu_214_p3;
reg   [2:0] select_ln110_reg_499;
wire   [0:0] and_ln110_fu_234_p2;
reg   [0:0] and_ln110_reg_504;
wire   [2:0] x_fu_240_p2;
reg   [2:0] x_reg_509;
wire   [2:0] select_ln110_2_fu_252_p3;
reg   [2:0] select_ln110_2_reg_514;
wire   [1:0] trunc_ln110_fu_272_p1;
reg   [1:0] trunc_ln110_reg_520;
wire   [2:0] select_ln110_7_fu_319_p3;
reg   [2:0] select_ln110_7_reg_530;
wire   [2:0] or_ln110_fu_327_p2;
reg   [2:0] or_ln110_reg_536;
wire   [5:0] add_ln99_fu_344_p2;
reg   [5:0] add_ln99_reg_546;
wire   [5:0] select_ln110_1_fu_350_p3;
reg   [5:0] select_ln110_1_reg_551;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
wire   [6:0] zext_ln110_fu_356_p1;
reg   [6:0] zext_ln110_reg_556;
wire   [2:0] select_ln110_3_fu_360_p3;
reg   [2:0] select_ln110_3_reg_563;
wire   [0:0] or_ln110_2_fu_405_p2;
reg   [0:0] or_ln110_2_reg_578;
reg   [3:0] output_addr_reg_583;
wire   [2:0] y_fu_433_p2;
reg   [2:0] y_reg_588;
wire   [5:0] select_ln99_fu_438_p3;
reg   [5:0] select_ln99_reg_593;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage1_subdone;
reg   [9:0] ap_phi_mux_indvar_flatten21_phi_fu_126_p4;
wire    ap_block_pp0_stage0;
reg   [5:0] ap_phi_mux_m_0_phi_fu_137_p4;
reg   [5:0] ap_phi_mux_indvar_flatten_phi_fu_149_p4;
reg   [2:0] ap_phi_mux_x_0_phi_fu_160_p4;
reg   [2:0] ap_phi_mux_y_0_phi_fu_171_p4;
wire   [63:0] tmp_s_fu_298_p5;
wire   [63:0] tmp_2_fu_333_p4;
wire   [63:0] tmp_1_fu_369_p5;
wire    ap_block_pp0_stage1;
wire   [63:0] tmp_3_fu_388_p4;
wire   [63:0] zext_ln114_1_fu_428_p1;
wire   [2:0] shl_ln110_fu_178_p2;
wire   [0:0] icmp_ln101_fu_228_p2;
wire   [0:0] xor_ln110_fu_222_p2;
wire   [0:0] or_ln110_5_fu_246_p2;
wire   [2:0] shl_ln110_1_fu_260_p2;
wire   [2:0] select_ln110_4_fu_282_p3;
wire   [2:0] select_ln110_5_fu_290_p3;
wire   [2:0] or_ln110_1_fu_184_p2;
wire   [2:0] or_ln110_6_fu_266_p2;
wire   [2:0] select_ln110_6_fu_311_p3;
wire   [2:0] shl_ln110_2_fu_276_p2;
wire   [0:0] tmp_4_fu_397_p3;
wire   [0:0] tmp_fu_380_p3;
wire   [4:0] tmp_8_fu_411_p3;
wire   [5:0] zext_ln114_fu_418_p1;
wire   [5:0] zext_ln110_1_fu_365_p1;
wire   [5:0] add_ln114_fu_422_p2;
wire   [0:0] tmp_5_fu_444_p3;
wire   [0:0] tmp_6_fu_451_p3;
wire   [0:0] or_ln110_3_fu_458_p2;
wire   [0:0] or_ln110_4_fu_464_p2;
wire    ap_CS_fsm_state5;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln97_reg_479 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten21_reg_122 <= add_ln97_reg_483;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten21_reg_122 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln97_reg_479 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten_reg_145 <= select_ln99_reg_593;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_145 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln97_reg_479 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        m_0_reg_133 <= select_ln110_1_reg_551;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        m_0_reg_133 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln97_reg_479 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        x_0_reg_156 <= select_ln110_3_reg_563;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        x_0_reg_156 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln97_reg_479 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        y_0_reg_167 <= y_reg_588;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        y_0_reg_167 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln97_reg_483 <= add_ln97_fu_196_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln97_fu_190_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln99_reg_546 <= add_ln99_fu_344_p2;
        and_ln110_reg_504 <= and_ln110_fu_234_p2;
        icmp_ln99_reg_493 <= icmp_ln99_fu_208_p2;
        m_reg_488 <= m_fu_202_p2;
        or_ln110_reg_536[2 : 1] <= or_ln110_fu_327_p2[2 : 1];
        select_ln110_2_reg_514 <= select_ln110_2_fu_252_p3;
        select_ln110_7_reg_530[2 : 1] <= select_ln110_7_fu_319_p3[2 : 1];
        select_ln110_reg_499 <= select_ln110_fu_214_p3;
        trunc_ln110_reg_520 <= trunc_ln110_fu_272_p1;
        x_reg_509 <= x_fu_240_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln97_reg_479 <= icmp_ln97_fu_190_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln97_reg_479 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        or_ln110_2_reg_578 <= or_ln110_2_fu_405_p2;
        output_addr_reg_583 <= zext_ln114_1_fu_428_p1;
        zext_ln110_reg_556[5 : 0] <= zext_ln110_fu_356_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln97_reg_479 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        select_ln110_1_reg_551 <= select_ln110_1_fu_350_p3;
        select_ln110_3_reg_563 <= select_ln110_3_fu_360_p3;
        select_ln99_reg_593 <= select_ln99_fu_438_p3;
        y_reg_588 <= y_fu_433_p2;
    end
end

always @ (*) begin
    if ((icmp_ln97_fu_190_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln97_reg_479 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten21_phi_fu_126_p4 = add_ln97_reg_483;
    end else begin
        ap_phi_mux_indvar_flatten21_phi_fu_126_p4 = indvar_flatten21_reg_122;
    end
end

always @ (*) begin
    if (((icmp_ln97_reg_479 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_149_p4 = select_ln99_reg_593;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_149_p4 = indvar_flatten_reg_145;
    end
end

always @ (*) begin
    if (((icmp_ln97_reg_479 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_m_0_phi_fu_137_p4 = select_ln110_1_reg_551;
    end else begin
        ap_phi_mux_m_0_phi_fu_137_p4 = m_0_reg_133;
    end
end

always @ (*) begin
    if (((icmp_ln97_reg_479 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_x_0_phi_fu_160_p4 = select_ln110_3_reg_563;
    end else begin
        ap_phi_mux_x_0_phi_fu_160_p4 = x_0_reg_156;
    end
end

always @ (*) begin
    if (((icmp_ln97_reg_479 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_y_0_phi_fu_171_p4 = y_reg_588;
    end else begin
        ap_phi_mux_y_0_phi_fu_171_p4 = y_0_reg_167;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            input_r_address0 = tmp_1_fu_369_p5;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            input_r_address0 = tmp_s_fu_298_p5;
        end else begin
            input_r_address0 = 'bx;
        end
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            input_r_address1 = tmp_3_fu_388_p4;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            input_r_address1 = tmp_2_fu_333_p4;
        end else begin
            input_r_address1 = 'bx;
        end
    end else begin
        input_r_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        input_r_ce1 = 1'b1;
    end else begin
        input_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        output_r_address0 = output_addr_reg_583;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        output_r_address0 = zext_ln114_1_fu_428_p1;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln97_reg_479 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln97_fu_190_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln97_fu_190_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln114_fu_422_p2 = (zext_ln114_fu_418_p1 + zext_ln110_1_fu_365_p1);

assign add_ln97_fu_196_p2 = (10'd1 + ap_phi_mux_indvar_flatten21_phi_fu_126_p4);

assign add_ln99_fu_344_p2 = (6'd1 + ap_phi_mux_indvar_flatten_phi_fu_149_p4);

assign and_ln110_fu_234_p2 = (xor_ln110_fu_222_p2 & icmp_ln101_fu_228_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign icmp_ln101_fu_228_p2 = ((ap_phi_mux_y_0_phi_fu_171_p4 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln97_fu_190_p2 = ((ap_phi_mux_indvar_flatten21_phi_fu_126_p4 == 10'd512) ? 1'b1 : 1'b0);

assign icmp_ln99_fu_208_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_149_p4 == 6'd16) ? 1'b1 : 1'b0);

assign m_fu_202_p2 = (6'd1 + ap_phi_mux_m_0_phi_fu_137_p4);

assign or_ln110_1_fu_184_p2 = (shl_ln110_fu_178_p2 | 3'd1);

assign or_ln110_2_fu_405_p2 = (tmp_fu_380_p3 | tmp_4_fu_397_p3);

assign or_ln110_3_fu_458_p2 = (tmp_6_fu_451_p3 | tmp_5_fu_444_p3);

assign or_ln110_4_fu_464_p2 = (or_ln110_3_fu_458_p2 | or_ln110_2_reg_578);

assign or_ln110_5_fu_246_p2 = (icmp_ln99_fu_208_p2 | and_ln110_fu_234_p2);

assign or_ln110_6_fu_266_p2 = (shl_ln110_1_fu_260_p2 | 3'd1);

assign or_ln110_fu_327_p2 = (shl_ln110_2_fu_276_p2 | 3'd1);

always @ (*) begin
    output_r_d0 = output_r_q0;
    output_r_d0[zext_ln110_reg_556] = |(or_ln110_4_fu_464_p2);
end

assign select_ln110_1_fu_350_p3 = ((icmp_ln99_reg_493[0:0] === 1'b1) ? m_reg_488 : m_0_reg_133);

assign select_ln110_2_fu_252_p3 = ((or_ln110_5_fu_246_p2[0:0] === 1'b1) ? 3'd0 : ap_phi_mux_y_0_phi_fu_171_p4);

assign select_ln110_3_fu_360_p3 = ((and_ln110_reg_504[0:0] === 1'b1) ? x_reg_509 : select_ln110_reg_499);

assign select_ln110_4_fu_282_p3 = ((icmp_ln99_fu_208_p2[0:0] === 1'b1) ? 3'd0 : shl_ln110_fu_178_p2);

assign select_ln110_5_fu_290_p3 = ((and_ln110_fu_234_p2[0:0] === 1'b1) ? shl_ln110_1_fu_260_p2 : select_ln110_4_fu_282_p3);

assign select_ln110_6_fu_311_p3 = ((icmp_ln99_fu_208_p2[0:0] === 1'b1) ? 3'd1 : or_ln110_1_fu_184_p2);

assign select_ln110_7_fu_319_p3 = ((and_ln110_fu_234_p2[0:0] === 1'b1) ? or_ln110_6_fu_266_p2 : select_ln110_6_fu_311_p3);

assign select_ln110_fu_214_p3 = ((icmp_ln99_fu_208_p2[0:0] === 1'b1) ? 3'd0 : ap_phi_mux_x_0_phi_fu_160_p4);

assign select_ln99_fu_438_p3 = ((icmp_ln99_reg_493[0:0] === 1'b1) ? 6'd1 : add_ln99_reg_546);

assign shl_ln110_1_fu_260_p2 = x_fu_240_p2 << 3'd1;

assign shl_ln110_2_fu_276_p2 = select_ln110_2_fu_252_p3 << 3'd1;

assign shl_ln110_fu_178_p2 = ap_phi_mux_x_0_phi_fu_160_p4 << 3'd1;

assign tmp_1_fu_369_p5 = {{{{{{58'd0}, {trunc_ln110_reg_520}}}, {1'd0}}}, {select_ln110_7_reg_530}};

assign tmp_2_fu_333_p4 = {{{{58'd0}, {or_ln110_fu_327_p2}}}, {select_ln110_5_fu_290_p3}};

assign tmp_3_fu_388_p4 = {{{{58'd0}, {or_ln110_reg_536}}}, {select_ln110_7_reg_530}};

assign tmp_4_fu_397_p3 = input_r_q1[zext_ln110_fu_356_p1];

assign tmp_5_fu_444_p3 = input_r_q0[zext_ln110_reg_556];

assign tmp_6_fu_451_p3 = input_r_q1[zext_ln110_reg_556];

assign tmp_8_fu_411_p3 = {{select_ln110_2_reg_514}, {2'd0}};

assign tmp_fu_380_p3 = input_r_q0[zext_ln110_fu_356_p1];

assign tmp_s_fu_298_p5 = {{{{{{58'd0}, {trunc_ln110_fu_272_p1}}}, {1'd0}}}, {select_ln110_5_fu_290_p3}};

assign trunc_ln110_fu_272_p1 = select_ln110_2_fu_252_p3[1:0];

assign x_fu_240_p2 = (3'd1 + select_ln110_fu_214_p3);

assign xor_ln110_fu_222_p2 = (icmp_ln99_fu_208_p2 ^ 1'd1);

assign y_fu_433_p2 = (3'd1 + select_ln110_2_reg_514);

assign zext_ln110_1_fu_365_p1 = select_ln110_3_fu_360_p3;

assign zext_ln110_fu_356_p1 = select_ln110_1_fu_350_p3;

assign zext_ln114_1_fu_428_p1 = add_ln114_fu_422_p2;

assign zext_ln114_fu_418_p1 = tmp_8_fu_411_p3;

always @ (posedge ap_clk) begin
    select_ln110_7_reg_530[0] <= 1'b1;
    or_ln110_reg_536[0] <= 1'b1;
    zext_ln110_reg_556[6] <= 1'b0;
end

endmodule //max_pool_32_8_s
