// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pad_16_8_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        output_r_q0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [6:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;
input  [15:0] output_r_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg[6:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[15:0] output_r_d0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] m_fu_113_p2;
reg   [4:0] m_reg_237;
wire    ap_CS_fsm_state2;
wire   [5:0] zext_ln27_fu_119_p1;
reg   [5:0] zext_ln27_reg_242;
wire   [0:0] icmp_ln22_fu_107_p2;
wire   [3:0] x_fu_129_p2;
reg   [3:0] x_reg_251;
wire    ap_CS_fsm_state3;
wire   [7:0] zext_ln27_1_fu_135_p1;
reg   [7:0] zext_ln27_1_reg_256;
wire   [0:0] icmp_ln24_fu_123_p2;
wire   [7:0] zext_ln26_fu_139_p1;
reg   [7:0] zext_ln26_reg_261;
wire   [3:0] y_fu_149_p2;
reg   [3:0] y_reg_269;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln26_fu_143_p2;
reg   [6:0] output_addr_reg_279;
reg   [4:0] m_0_reg_74;
reg   [3:0] x_0_reg_85;
reg   [3:0] y_0_reg_96;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln27_3_fu_172_p1;
wire   [63:0] zext_ln27_6_fu_212_p1;
wire   [6:0] tmp_4_fu_155_p3;
wire   [7:0] zext_ln27_2_fu_163_p1;
wire   [7:0] add_ln27_fu_167_p2;
wire   [6:0] tmp_5_fu_177_p3;
wire   [4:0] tmp_6_fu_189_p3;
wire   [7:0] zext_ln27_5_fu_197_p1;
wire   [7:0] zext_ln27_4_fu_185_p1;
wire   [7:0] add_ln27_2_fu_201_p2;
wire   [7:0] add_ln27_3_fu_207_p2;
wire   [0:0] tmp_2_fu_217_p3;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_123_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        m_0_reg_74 <= m_reg_237;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        m_0_reg_74 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_143_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        x_0_reg_85 <= x_reg_251;
    end else if (((icmp_ln22_fu_107_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        x_0_reg_85 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        y_0_reg_96 <= y_reg_269;
    end else if (((icmp_ln24_fu_123_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        y_0_reg_96 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        m_reg_237 <= m_fu_113_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_143_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        output_addr_reg_279 <= zext_ln27_6_fu_212_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        x_reg_251 <= x_fu_129_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        y_reg_269 <= y_fu_149_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_123_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        zext_ln26_reg_261[3 : 0] <= zext_ln26_fu_139_p1[3 : 0];
        zext_ln27_1_reg_256[3 : 0] <= zext_ln27_1_fu_135_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_fu_107_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln27_reg_242[4 : 0] <= zext_ln27_fu_119_p1[4 : 0];
    end
end

always @ (*) begin
    if ((((icmp_ln22_fu_107_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln22_fu_107_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        output_r_address0 = output_addr_reg_279;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        output_r_address0 = zext_ln27_6_fu_212_p1;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln22_fu_107_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln24_fu_123_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln26_fu_143_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln27_2_fu_201_p2 = (zext_ln27_5_fu_197_p1 + zext_ln27_4_fu_185_p1);

assign add_ln27_3_fu_207_p2 = (add_ln27_2_fu_201_p2 + zext_ln26_reg_261);

assign add_ln27_fu_167_p2 = (zext_ln27_2_fu_163_p1 + zext_ln27_1_reg_256);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign icmp_ln22_fu_107_p2 = ((m_0_reg_74 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_123_p2 = ((x_0_reg_85 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_143_p2 = ((y_0_reg_96 == 4'd8) ? 1'b1 : 1'b0);

assign input_r_address0 = zext_ln27_3_fu_172_p1;

assign m_fu_113_p2 = (m_0_reg_74 + 5'd1);

always @ (*) begin
    output_r_d0 = output_r_q0;
    output_r_d0[zext_ln27_reg_242] = |(tmp_2_fu_217_p3);
end

assign tmp_2_fu_217_p3 = input_r_q0[zext_ln27_reg_242];

assign tmp_4_fu_155_p3 = {{y_0_reg_96}, {3'd0}};

assign tmp_5_fu_177_p3 = {{y_fu_149_p2}, {3'd0}};

assign tmp_6_fu_189_p3 = {{y_fu_149_p2}, {1'd0}};

assign x_fu_129_p2 = (x_0_reg_85 + 4'd1);

assign y_fu_149_p2 = (y_0_reg_96 + 4'd1);

assign zext_ln26_fu_139_p1 = x_fu_129_p2;

assign zext_ln27_1_fu_135_p1 = x_0_reg_85;

assign zext_ln27_2_fu_163_p1 = tmp_4_fu_155_p3;

assign zext_ln27_3_fu_172_p1 = add_ln27_fu_167_p2;

assign zext_ln27_4_fu_185_p1 = tmp_5_fu_177_p3;

assign zext_ln27_5_fu_197_p1 = tmp_6_fu_189_p3;

assign zext_ln27_6_fu_212_p1 = add_ln27_3_fu_207_p2;

assign zext_ln27_fu_119_p1 = m_0_reg_74;

always @ (posedge ap_clk) begin
    zext_ln27_reg_242[5] <= 1'b0;
    zext_ln27_1_reg_256[7:4] <= 4'b0000;
    zext_ln26_reg_261[7:4] <= 4'b0000;
end

endmodule //pad_16_8_s
