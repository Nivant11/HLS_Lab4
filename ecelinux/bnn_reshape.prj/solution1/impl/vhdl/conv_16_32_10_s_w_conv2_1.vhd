-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_16_32_10_s_w_conv2_1_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 96
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_16_32_10_s_w_conv2_1_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1010001100001000", 1 => "1000001100001000", 2 => "1010001100011000", 
    3 => "0011000001011101", 4 => "1101110010000110", 5 => "1110001010010010", 
    6 => "1011111010011001", 7 => "1000000000010101", 8 => "1001010100001011", 
    9 => "1110001111110100", 10 to 11=> "1010001110110010", 12 => "1000110111110101", 
    13 => "1100110111110101", 14 => "0010000110000101", 15 => "0011000010001000", 
    16 => "0101010111101111", 17 => "1000100010110111", 18 => "1001001100001000", 
    19 => "0011011010101001", 20 => "1100110111100010", 21 => "0101000100101100", 
    22 => "0001110011001011", 23 => "0101000010010100", 24 => "1100110111110110", 
    25 => "0010110100101011", 26 => "0111100110110000", 27 => "1010001111110000", 
    28 => "1010001100110010", 29 => "1010001111110010", 30 => "1011110001001111", 
    31 => "0011110110111111", 32 => "1010100111110011", 33 => "0011001110001000", 
    34 => "1010001101001011", 35 => "1101011110111010", 36 => "1110001101000100", 
    37 => "0010111010011000", 38 => "1011001010001000", 39 => "1000110110101001", 
    40 => "0111111100001010", 41 => "1010101110011010", 42 => "1001110000110101", 
    43 => "0001110001101000", 44 => "0001011101011000", 45 => "1110000010011100", 
    46 => "0111111011011110", 47 => "0011110010101000", 48 => "0001110101101101", 
    49 => "1101110111100101", 50 => "1010001110001110", 51 => "0110111100101101", 
    52 => "1110011110010010", 53 => "1110100111110010", 54 => "0011110011010001", 
    55 => "1110000111110111", 56 => "1110111101100111", 57 => "0100110110001110", 
    58 => "1010011111000011", 59 => "1111001001001001", 60 => "0100110000110111", 
    61 => "0100001110000110", 62 => "0101110111101101", 63 => "0100111101000100", 
    64 => "1010101100110000", 65 => "1010101111010000", 66 => "1001101110111101", 
    67 => "1010101110010110", 68 => "0100001011110010", 69 => "0010011111110111", 
    70 => "0110110111000111", 71 => "0110000111110111", 72 => "0111111000101011", 
    73 => "0101111000101101", 74 => "1011100110010110", 75 => "1001010110010110", 
    76 => "1100001110110110", 77 => "1010101111110110", 78 => "0001100111000110", 
    79 => "0101000001001000", 80 => "0001110011101101", 81 => "0101000000111101", 
    82 => "0011111010011011", 83 => "1110110111110010", 84 => "0011110010101010", 
    85 => "0101110001101101", 86 => "0001000000011100", 87 => "1010101111100010", 
    88 => "1110001110011001", 89 => "1101100011110111", 90 => "0001001101001000", 
    91 => "0001011000001000", 92 => "1010011100001000", 93 => "0011111001001100", 
    94 => "1001110110100011", 95 => "1010001110010110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_16_32_10_s_w_conv2_1 is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 96;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_16_32_10_s_w_conv2_1 is
    component conv_16_32_10_s_w_conv2_1_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_16_32_10_s_w_conv2_1_rom_U :  component conv_16_32_10_s_w_conv2_1_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


