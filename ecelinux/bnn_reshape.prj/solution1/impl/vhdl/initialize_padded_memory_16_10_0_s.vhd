-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity initialize_padded_memory_16_10_0_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_we0 : OUT STD_LOGIC;
    input_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of initialize_padded_memory_16_10_0_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal m_fu_96_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal m_reg_187 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln46_fu_102_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln46_reg_192 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln41_fu_90_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_fu_112_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal x_reg_200 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln46_fu_142_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln46_reg_205 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln43_fu_106_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_fu_154_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal y_reg_213 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal input_addr_reg_218 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln45_fu_148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_0_reg_57 : STD_LOGIC_VECTOR (4 downto 0);
    signal x_0_reg_68 : STD_LOGIC_VECTOR (3 downto 0);
    signal y_0_reg_79 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln46_4_fu_169_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_fu_118_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_17_fu_130_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln46_2_fu_138_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln46_1_fu_126_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln46_3_fu_160_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln46_1_fu_164_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    m_0_reg_57_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln43_fu_106_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                m_0_reg_57 <= m_reg_187;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                m_0_reg_57 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    x_0_reg_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln45_fu_148_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                x_0_reg_68 <= x_reg_200;
            elsif (((icmp_ln41_fu_90_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                x_0_reg_68 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    y_0_reg_79_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                y_0_reg_79 <= y_reg_213;
            elsif (((icmp_ln43_fu_106_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                y_0_reg_79 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln43_fu_106_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    add_ln46_reg_205(7 downto 1) <= add_ln46_fu_142_p2(7 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln45_fu_148_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                input_addr_reg_218 <= zext_ln46_4_fu_169_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                m_reg_187 <= m_fu_96_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                x_reg_200 <= x_fu_112_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                y_reg_213 <= y_fu_154_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln41_fu_90_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln46_reg_192(4 downto 0) <= zext_ln46_fu_102_p1(4 downto 0);
            end if;
        end if;
    end process;
    zext_ln46_reg_192(5) <= '0';
    add_ln46_reg_205(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln41_fu_90_p2, ap_CS_fsm_state3, icmp_ln43_fu_106_p2, ap_CS_fsm_state4, icmp_ln45_fu_148_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln41_fu_90_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln43_fu_106_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln45_fu_148_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln46_1_fu_164_p2 <= std_logic_vector(unsigned(add_ln46_reg_205) + unsigned(zext_ln46_3_fu_160_p1));
    add_ln46_fu_142_p2 <= std_logic_vector(unsigned(zext_ln46_2_fu_138_p1) + unsigned(zext_ln46_1_fu_126_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln41_fu_90_p2)
    begin
        if ((((icmp_ln41_fu_90_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln41_fu_90_p2)
    begin
        if (((icmp_ln41_fu_90_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln41_fu_90_p2 <= "1" when (m_0_reg_57 = ap_const_lv5_10) else "0";
    icmp_ln43_fu_106_p2 <= "1" when (x_0_reg_68 = ap_const_lv4_A) else "0";
    icmp_ln45_fu_148_p2 <= "1" when (y_0_reg_79 = ap_const_lv4_A) else "0";

    input_r_address0_assign_proc : process(ap_CS_fsm_state4, input_addr_reg_218, ap_CS_fsm_state5, zext_ln46_4_fu_169_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            input_r_address0 <= input_addr_reg_218;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_r_address0 <= zext_ln46_4_fu_169_p1(7 - 1 downto 0);
        else 
            input_r_address0 <= "XXXXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    
    input_r_d0_proc : process(input_r_q0, zext_ln46_reg_192)
    begin
        input_r_d0 <= input_r_q0;
        if to_integer(unsigned(zext_ln46_reg_192)) >= input_r_q0'low and to_integer(unsigned(zext_ln46_reg_192)) <= input_r_q0'high then
            input_r_d0(to_integer(unsigned(zext_ln46_reg_192))) <= ap_const_lv1_0(0);
        end if;
    end process;


    input_r_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            input_r_we0 <= ap_const_logic_1;
        else 
            input_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    m_fu_96_p2 <= std_logic_vector(unsigned(m_0_reg_57) + unsigned(ap_const_lv5_1));
    tmp_16_fu_118_p3 <= (x_0_reg_68 & ap_const_lv3_0);
    tmp_17_fu_130_p3 <= (x_0_reg_68 & ap_const_lv1_0);
    x_fu_112_p2 <= std_logic_vector(unsigned(x_0_reg_68) + unsigned(ap_const_lv4_1));
    y_fu_154_p2 <= std_logic_vector(unsigned(y_0_reg_79) + unsigned(ap_const_lv4_1));
    zext_ln46_1_fu_126_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_118_p3),8));
    zext_ln46_2_fu_138_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_130_p3),8));
    zext_ln46_3_fu_160_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_0_reg_79),8));
    zext_ln46_4_fu_169_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln46_1_fu_164_p2),64));
    zext_ln46_fu_102_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_0_reg_57),6));
end behav;
