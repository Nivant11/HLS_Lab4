// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _max_pool_16_16_s_HH_
#define _max_pool_16_16_s_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct max_pool_16_16_s : public sc_module {
    // Port declarations 17
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<8> > input_r_address0;
    sc_out< sc_logic > input_r_ce0;
    sc_in< sc_lv<16> > input_r_q0;
    sc_out< sc_lv<8> > input_r_address1;
    sc_out< sc_logic > input_r_ce1;
    sc_in< sc_lv<16> > input_r_q1;
    sc_out< sc_lv<6> > output_r_address0;
    sc_out< sc_logic > output_r_ce0;
    sc_out< sc_logic > output_r_we0;
    sc_out< sc_lv<16> > output_r_d0;
    sc_in< sc_lv<16> > output_r_q0;


    // Module declarations
    max_pool_16_16_s(sc_module_name name);
    SC_HAS_PROCESS(max_pool_16_16_s);

    ~max_pool_16_16_s();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<11> > indvar_flatten21_reg_126;
    sc_signal< sc_lv<5> > m_0_reg_137;
    sc_signal< sc_lv<8> > indvar_flatten_reg_149;
    sc_signal< sc_lv<4> > x_0_reg_160;
    sc_signal< sc_lv<4> > y_0_reg_171;
    sc_signal< sc_lv<1> > icmp_ln97_fu_194_p2;
    sc_signal< sc_lv<1> > icmp_ln97_reg_483;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<11> > add_ln97_fu_200_p2;
    sc_signal< sc_lv<11> > add_ln97_reg_487;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<5> > m_fu_206_p2;
    sc_signal< sc_lv<5> > m_reg_492;
    sc_signal< sc_lv<1> > icmp_ln99_fu_212_p2;
    sc_signal< sc_lv<1> > icmp_ln99_reg_497;
    sc_signal< sc_lv<4> > select_ln110_fu_218_p3;
    sc_signal< sc_lv<4> > select_ln110_reg_503;
    sc_signal< sc_lv<1> > and_ln110_fu_238_p2;
    sc_signal< sc_lv<1> > and_ln110_reg_508;
    sc_signal< sc_lv<4> > x_fu_244_p2;
    sc_signal< sc_lv<4> > x_reg_513;
    sc_signal< sc_lv<4> > select_ln110_9_fu_256_p3;
    sc_signal< sc_lv<4> > select_ln110_9_reg_518;
    sc_signal< sc_lv<3> > trunc_ln110_fu_276_p1;
    sc_signal< sc_lv<3> > trunc_ln110_reg_524;
    sc_signal< sc_lv<4> > select_ln110_14_fu_323_p3;
    sc_signal< sc_lv<4> > select_ln110_14_reg_534;
    sc_signal< sc_lv<4> > or_ln110_fu_331_p2;
    sc_signal< sc_lv<4> > or_ln110_reg_540;
    sc_signal< sc_lv<8> > add_ln99_fu_348_p2;
    sc_signal< sc_lv<8> > add_ln99_reg_550;
    sc_signal< sc_lv<5> > select_ln110_8_fu_354_p3;
    sc_signal< sc_lv<5> > select_ln110_8_reg_555;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage1;
    sc_signal< bool > ap_block_state3_pp0_stage1_iter0;
    sc_signal< bool > ap_block_pp0_stage1_11001;
    sc_signal< sc_lv<6> > zext_ln110_fu_360_p1;
    sc_signal< sc_lv<6> > zext_ln110_reg_560;
    sc_signal< sc_lv<4> > select_ln110_10_fu_364_p3;
    sc_signal< sc_lv<4> > select_ln110_10_reg_567;
    sc_signal< sc_lv<1> > or_ln110_6_fu_409_p2;
    sc_signal< sc_lv<1> > or_ln110_6_reg_582;
    sc_signal< sc_lv<6> > output_addr_reg_587;
    sc_signal< sc_lv<4> > y_fu_437_p2;
    sc_signal< sc_lv<4> > y_reg_592;
    sc_signal< sc_lv<8> > select_ln99_fu_442_p3;
    sc_signal< sc_lv<8> > select_ln99_reg_597;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage1_subdone;
    sc_signal< sc_lv<11> > ap_phi_mux_indvar_flatten21_phi_fu_130_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<5> > ap_phi_mux_m_0_phi_fu_141_p4;
    sc_signal< sc_lv<8> > ap_phi_mux_indvar_flatten_phi_fu_153_p4;
    sc_signal< sc_lv<4> > ap_phi_mux_x_0_phi_fu_164_p4;
    sc_signal< sc_lv<4> > ap_phi_mux_y_0_phi_fu_175_p4;
    sc_signal< sc_lv<64> > tmp_s_fu_302_p5;
    sc_signal< sc_lv<64> > tmp_10_fu_337_p4;
    sc_signal< sc_lv<64> > tmp_9_fu_373_p5;
    sc_signal< bool > ap_block_pp0_stage1;
    sc_signal< sc_lv<64> > tmp_11_fu_392_p4;
    sc_signal< sc_lv<64> > zext_ln114_2_fu_432_p1;
    sc_signal< sc_lv<4> > shl_ln110_fu_182_p2;
    sc_signal< sc_lv<1> > icmp_ln101_fu_232_p2;
    sc_signal< sc_lv<1> > xor_ln110_fu_226_p2;
    sc_signal< sc_lv<1> > or_ln110_9_fu_250_p2;
    sc_signal< sc_lv<4> > shl_ln110_3_fu_264_p2;
    sc_signal< sc_lv<4> > select_ln110_11_fu_286_p3;
    sc_signal< sc_lv<4> > select_ln110_12_fu_294_p3;
    sc_signal< sc_lv<4> > or_ln110_5_fu_188_p2;
    sc_signal< sc_lv<4> > or_ln110_10_fu_270_p2;
    sc_signal< sc_lv<4> > select_ln110_13_fu_315_p3;
    sc_signal< sc_lv<4> > shl_ln110_4_fu_280_p2;
    sc_signal< sc_lv<1> > tmp_12_fu_401_p3;
    sc_signal< sc_lv<1> > tmp_fu_384_p3;
    sc_signal< sc_lv<7> > tmp_15_fu_415_p3;
    sc_signal< sc_lv<8> > zext_ln114_fu_422_p1;
    sc_signal< sc_lv<8> > zext_ln110_2_fu_369_p1;
    sc_signal< sc_lv<8> > add_ln114_fu_426_p2;
    sc_signal< sc_lv<1> > tmp_13_fu_448_p3;
    sc_signal< sc_lv<1> > tmp_14_fu_455_p3;
    sc_signal< sc_lv<1> > or_ln110_7_fu_462_p2;
    sc_signal< sc_lv<1> > or_ln110_8_fu_468_p2;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_pp0_stage0;
    static const sc_lv<4> ap_ST_fsm_pp0_stage1;
    static const sc_lv<4> ap_ST_fsm_state5;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<11> ap_const_lv11_0;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<11> ap_const_lv11_400;
    static const sc_lv<11> ap_const_lv11_1;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<8> ap_const_lv8_40;
    static const sc_lv<4> ap_const_lv4_8;
    static const sc_lv<56> ap_const_lv56_0;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<32> ap_const_lv32_3;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln114_fu_426_p2();
    void thread_add_ln97_fu_200_p2();
    void thread_add_ln99_fu_348_p2();
    void thread_and_ln110_fu_238_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp0_stage1();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp0_stage1();
    void thread_ap_block_pp0_stage1_11001();
    void thread_ap_block_pp0_stage1_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage1_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_indvar_flatten21_phi_fu_130_p4();
    void thread_ap_phi_mux_indvar_flatten_phi_fu_153_p4();
    void thread_ap_phi_mux_m_0_phi_fu_141_p4();
    void thread_ap_phi_mux_x_0_phi_fu_164_p4();
    void thread_ap_phi_mux_y_0_phi_fu_175_p4();
    void thread_ap_ready();
    void thread_icmp_ln101_fu_232_p2();
    void thread_icmp_ln97_fu_194_p2();
    void thread_icmp_ln99_fu_212_p2();
    void thread_input_r_address0();
    void thread_input_r_address1();
    void thread_input_r_ce0();
    void thread_input_r_ce1();
    void thread_m_fu_206_p2();
    void thread_or_ln110_10_fu_270_p2();
    void thread_or_ln110_5_fu_188_p2();
    void thread_or_ln110_6_fu_409_p2();
    void thread_or_ln110_7_fu_462_p2();
    void thread_or_ln110_8_fu_468_p2();
    void thread_or_ln110_9_fu_250_p2();
    void thread_or_ln110_fu_331_p2();
    void thread_output_r_address0();
    void thread_output_r_ce0();
    void thread_output_r_d0();
    void thread_output_r_we0();
    void thread_select_ln110_10_fu_364_p3();
    void thread_select_ln110_11_fu_286_p3();
    void thread_select_ln110_12_fu_294_p3();
    void thread_select_ln110_13_fu_315_p3();
    void thread_select_ln110_14_fu_323_p3();
    void thread_select_ln110_8_fu_354_p3();
    void thread_select_ln110_9_fu_256_p3();
    void thread_select_ln110_fu_218_p3();
    void thread_select_ln99_fu_442_p3();
    void thread_shl_ln110_3_fu_264_p2();
    void thread_shl_ln110_4_fu_280_p2();
    void thread_shl_ln110_fu_182_p2();
    void thread_tmp_10_fu_337_p4();
    void thread_tmp_11_fu_392_p4();
    void thread_tmp_12_fu_401_p3();
    void thread_tmp_13_fu_448_p3();
    void thread_tmp_14_fu_455_p3();
    void thread_tmp_15_fu_415_p3();
    void thread_tmp_9_fu_373_p5();
    void thread_tmp_fu_384_p3();
    void thread_tmp_s_fu_302_p5();
    void thread_trunc_ln110_fu_276_p1();
    void thread_x_fu_244_p2();
    void thread_xor_ln110_fu_226_p2();
    void thread_y_fu_437_p2();
    void thread_zext_ln110_2_fu_369_p1();
    void thread_zext_ln110_fu_360_p1();
    void thread_zext_ln114_2_fu_432_p1();
    void thread_zext_ln114_fu_422_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
