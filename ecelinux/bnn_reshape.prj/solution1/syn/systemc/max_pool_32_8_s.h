// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _max_pool_32_8_s_HH_
#define _max_pool_32_8_s_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct max_pool_32_8_s : public sc_module {
    // Port declarations 17
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<6> > input_r_address0;
    sc_out< sc_logic > input_r_ce0;
    sc_in< sc_lv<32> > input_r_q0;
    sc_out< sc_lv<6> > input_r_address1;
    sc_out< sc_logic > input_r_ce1;
    sc_in< sc_lv<32> > input_r_q1;
    sc_out< sc_lv<4> > output_r_address0;
    sc_out< sc_logic > output_r_ce0;
    sc_out< sc_logic > output_r_we0;
    sc_out< sc_lv<32> > output_r_d0;
    sc_in< sc_lv<32> > output_r_q0;


    // Module declarations
    max_pool_32_8_s(sc_module_name name);
    SC_HAS_PROCESS(max_pool_32_8_s);

    ~max_pool_32_8_s();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<10> > indvar_flatten21_reg_122;
    sc_signal< sc_lv<6> > m_0_reg_133;
    sc_signal< sc_lv<6> > indvar_flatten_reg_145;
    sc_signal< sc_lv<3> > x_0_reg_156;
    sc_signal< sc_lv<3> > y_0_reg_167;
    sc_signal< sc_lv<1> > icmp_ln97_fu_190_p2;
    sc_signal< sc_lv<1> > icmp_ln97_reg_479;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<10> > add_ln97_fu_196_p2;
    sc_signal< sc_lv<10> > add_ln97_reg_483;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<6> > m_fu_202_p2;
    sc_signal< sc_lv<6> > m_reg_488;
    sc_signal< sc_lv<1> > icmp_ln99_fu_208_p2;
    sc_signal< sc_lv<1> > icmp_ln99_reg_493;
    sc_signal< sc_lv<3> > select_ln110_fu_214_p3;
    sc_signal< sc_lv<3> > select_ln110_reg_499;
    sc_signal< sc_lv<1> > and_ln110_fu_234_p2;
    sc_signal< sc_lv<1> > and_ln110_reg_504;
    sc_signal< sc_lv<3> > x_fu_240_p2;
    sc_signal< sc_lv<3> > x_reg_509;
    sc_signal< sc_lv<3> > select_ln110_2_fu_252_p3;
    sc_signal< sc_lv<3> > select_ln110_2_reg_514;
    sc_signal< sc_lv<2> > trunc_ln110_fu_272_p1;
    sc_signal< sc_lv<2> > trunc_ln110_reg_520;
    sc_signal< sc_lv<3> > select_ln110_7_fu_319_p3;
    sc_signal< sc_lv<3> > select_ln110_7_reg_530;
    sc_signal< sc_lv<3> > or_ln110_fu_327_p2;
    sc_signal< sc_lv<3> > or_ln110_reg_536;
    sc_signal< sc_lv<6> > add_ln99_fu_344_p2;
    sc_signal< sc_lv<6> > add_ln99_reg_546;
    sc_signal< sc_lv<6> > select_ln110_1_fu_350_p3;
    sc_signal< sc_lv<6> > select_ln110_1_reg_551;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage1;
    sc_signal< bool > ap_block_state3_pp0_stage1_iter0;
    sc_signal< bool > ap_block_pp0_stage1_11001;
    sc_signal< sc_lv<7> > zext_ln110_fu_356_p1;
    sc_signal< sc_lv<7> > zext_ln110_reg_556;
    sc_signal< sc_lv<3> > select_ln110_3_fu_360_p3;
    sc_signal< sc_lv<3> > select_ln110_3_reg_563;
    sc_signal< sc_lv<1> > or_ln110_2_fu_405_p2;
    sc_signal< sc_lv<1> > or_ln110_2_reg_578;
    sc_signal< sc_lv<4> > output_addr_reg_583;
    sc_signal< sc_lv<3> > y_fu_433_p2;
    sc_signal< sc_lv<3> > y_reg_588;
    sc_signal< sc_lv<6> > select_ln99_fu_438_p3;
    sc_signal< sc_lv<6> > select_ln99_reg_593;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage1_subdone;
    sc_signal< sc_lv<10> > ap_phi_mux_indvar_flatten21_phi_fu_126_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<6> > ap_phi_mux_m_0_phi_fu_137_p4;
    sc_signal< sc_lv<6> > ap_phi_mux_indvar_flatten_phi_fu_149_p4;
    sc_signal< sc_lv<3> > ap_phi_mux_x_0_phi_fu_160_p4;
    sc_signal< sc_lv<3> > ap_phi_mux_y_0_phi_fu_171_p4;
    sc_signal< sc_lv<64> > tmp_s_fu_298_p5;
    sc_signal< sc_lv<64> > tmp_2_fu_333_p4;
    sc_signal< sc_lv<64> > tmp_1_fu_369_p5;
    sc_signal< bool > ap_block_pp0_stage1;
    sc_signal< sc_lv<64> > tmp_3_fu_388_p4;
    sc_signal< sc_lv<64> > zext_ln114_1_fu_428_p1;
    sc_signal< sc_lv<3> > shl_ln110_fu_178_p2;
    sc_signal< sc_lv<1> > icmp_ln101_fu_228_p2;
    sc_signal< sc_lv<1> > xor_ln110_fu_222_p2;
    sc_signal< sc_lv<1> > or_ln110_5_fu_246_p2;
    sc_signal< sc_lv<3> > shl_ln110_1_fu_260_p2;
    sc_signal< sc_lv<3> > select_ln110_4_fu_282_p3;
    sc_signal< sc_lv<3> > select_ln110_5_fu_290_p3;
    sc_signal< sc_lv<3> > or_ln110_1_fu_184_p2;
    sc_signal< sc_lv<3> > or_ln110_6_fu_266_p2;
    sc_signal< sc_lv<3> > select_ln110_6_fu_311_p3;
    sc_signal< sc_lv<3> > shl_ln110_2_fu_276_p2;
    sc_signal< sc_lv<1> > tmp_4_fu_397_p3;
    sc_signal< sc_lv<1> > tmp_fu_380_p3;
    sc_signal< sc_lv<5> > tmp_8_fu_411_p3;
    sc_signal< sc_lv<6> > zext_ln114_fu_418_p1;
    sc_signal< sc_lv<6> > zext_ln110_1_fu_365_p1;
    sc_signal< sc_lv<6> > add_ln114_fu_422_p2;
    sc_signal< sc_lv<1> > tmp_5_fu_444_p3;
    sc_signal< sc_lv<1> > tmp_6_fu_451_p3;
    sc_signal< sc_lv<1> > or_ln110_3_fu_458_p2;
    sc_signal< sc_lv<1> > or_ln110_4_fu_464_p2;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_pp0_stage0;
    static const sc_lv<4> ap_ST_fsm_pp0_stage1;
    static const sc_lv<4> ap_ST_fsm_state5;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<10> ap_const_lv10_200;
    static const sc_lv<10> ap_const_lv10_1;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<6> ap_const_lv6_10;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<58> ap_const_lv58_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<32> ap_const_lv32_3;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln114_fu_422_p2();
    void thread_add_ln97_fu_196_p2();
    void thread_add_ln99_fu_344_p2();
    void thread_and_ln110_fu_234_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp0_stage1();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp0_stage1();
    void thread_ap_block_pp0_stage1_11001();
    void thread_ap_block_pp0_stage1_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage1_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_indvar_flatten21_phi_fu_126_p4();
    void thread_ap_phi_mux_indvar_flatten_phi_fu_149_p4();
    void thread_ap_phi_mux_m_0_phi_fu_137_p4();
    void thread_ap_phi_mux_x_0_phi_fu_160_p4();
    void thread_ap_phi_mux_y_0_phi_fu_171_p4();
    void thread_ap_ready();
    void thread_icmp_ln101_fu_228_p2();
    void thread_icmp_ln97_fu_190_p2();
    void thread_icmp_ln99_fu_208_p2();
    void thread_input_r_address0();
    void thread_input_r_address1();
    void thread_input_r_ce0();
    void thread_input_r_ce1();
    void thread_m_fu_202_p2();
    void thread_or_ln110_1_fu_184_p2();
    void thread_or_ln110_2_fu_405_p2();
    void thread_or_ln110_3_fu_458_p2();
    void thread_or_ln110_4_fu_464_p2();
    void thread_or_ln110_5_fu_246_p2();
    void thread_or_ln110_6_fu_266_p2();
    void thread_or_ln110_fu_327_p2();
    void thread_output_r_address0();
    void thread_output_r_ce0();
    void thread_output_r_d0();
    void thread_output_r_we0();
    void thread_select_ln110_1_fu_350_p3();
    void thread_select_ln110_2_fu_252_p3();
    void thread_select_ln110_3_fu_360_p3();
    void thread_select_ln110_4_fu_282_p3();
    void thread_select_ln110_5_fu_290_p3();
    void thread_select_ln110_6_fu_311_p3();
    void thread_select_ln110_7_fu_319_p3();
    void thread_select_ln110_fu_214_p3();
    void thread_select_ln99_fu_438_p3();
    void thread_shl_ln110_1_fu_260_p2();
    void thread_shl_ln110_2_fu_276_p2();
    void thread_shl_ln110_fu_178_p2();
    void thread_tmp_1_fu_369_p5();
    void thread_tmp_2_fu_333_p4();
    void thread_tmp_3_fu_388_p4();
    void thread_tmp_4_fu_397_p3();
    void thread_tmp_5_fu_444_p3();
    void thread_tmp_6_fu_451_p3();
    void thread_tmp_8_fu_411_p3();
    void thread_tmp_fu_380_p3();
    void thread_tmp_s_fu_298_p5();
    void thread_trunc_ln110_fu_272_p1();
    void thread_x_fu_240_p2();
    void thread_xor_ln110_fu_222_p2();
    void thread_y_fu_433_p2();
    void thread_zext_ln110_1_fu_365_p1();
    void thread_zext_ln110_fu_356_p1();
    void thread_zext_ln114_1_fu_428_p1();
    void thread_zext_ln114_fu_418_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
