// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv_16_32_10_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        input_r_address1,
        input_r_ce1,
        input_r_q1,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        output_r_q0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_pp0_stage0 = 6'd4;
parameter    ap_ST_fsm_pp0_stage1 = 6'd8;
parameter    ap_ST_fsm_state7 = 6'd16;
parameter    ap_ST_fsm_state8 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [6:0] input_r_address1;
output   input_r_ce1;
input  [15:0] input_r_q1;
output  [5:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
input  [31:0] output_r_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[6:0] input_r_address0;
reg input_r_ce0;
reg input_r_ce1;
reg output_r_ce0;
reg output_r_we0;
reg[31:0] output_r_d0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] w_conv2_0_address0;
reg    w_conv2_0_ce0;
wire   [15:0] w_conv2_0_q0;
wire   [6:0] w_conv2_1_address0;
reg    w_conv2_1_ce0;
wire   [15:0] w_conv2_1_q0;
wire   [6:0] w_conv2_2_address0;
reg    w_conv2_2_ce0;
wire   [15:0] w_conv2_2_q0;
reg   [7:0] p_014_0_reg_264;
reg   [1:0] c_0_reg_276;
wire   [0:0] icmp_ln66_fu_287_p2;
wire    ap_CS_fsm_state2;
wire   [11:0] add_ln66_fu_293_p2;
reg   [11:0] add_ln66_reg_2635;
wire   [0:0] icmp_ln67_fu_305_p2;
reg   [0:0] icmp_ln67_reg_2640;
wire   [5:0] select_ln76_1_fu_319_p3;
reg   [5:0] select_ln76_1_reg_2645;
wire   [7:0] sub_ln76_fu_339_p2;
reg   [7:0] sub_ln76_reg_2650;
wire   [6:0] zext_ln76_1_fu_345_p1;
reg   [6:0] zext_ln76_1_reg_2655;
wire   [7:0] p_cast97_mid2_v_fu_353_p3;
reg   [7:0] p_cast97_mid2_v_reg_2660;
wire   [7:0] or_ln76_fu_361_p2;
reg   [7:0] or_ln76_reg_2666;
wire   [3:0] select_ln81_1_fu_405_p3;
reg   [3:0] select_ln81_1_reg_2672;
wire   [7:0] add_ln76_1_fu_441_p2;
reg   [7:0] add_ln76_1_reg_2678;
reg   [5:0] output_addr_reg_2683;
wire   [3:0] y_fu_458_p2;
reg   [3:0] y_reg_2688;
wire   [7:0] add_ln76_4_fu_488_p2;
reg   [7:0] add_ln76_4_reg_2693;
wire   [7:0] add_ln76_5_fu_524_p2;
reg   [7:0] add_ln76_5_reg_2698;
wire   [0:0] icmp_ln70_fu_530_p2;
reg   [0:0] icmp_ln70_reg_2703;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln70_reg_2703_pp0_iter1_reg;
wire   [1:0] c_fu_536_p2;
reg   [1:0] c_reg_2707;
reg    ap_enable_reg_pp0_iter0;
wire   [7:0] add_ln76_8_fu_575_p2;
reg   [7:0] add_ln76_8_reg_2722;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state4_pp0_stage1_iter0;
wire    ap_block_state6_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
wire   [0:0] xor_ln76_61_fu_1566_p2;
reg   [0:0] xor_ln76_61_reg_2747;
wire   [0:0] xor_ln76_63_fu_1594_p2;
reg   [0:0] xor_ln76_63_reg_2752;
reg   [15:0] w_conv2_2_load_reg_2757;
wire   [2:0] add_ln700_4_fu_1632_p2;
reg   [2:0] add_ln700_4_reg_2777;
wire   [2:0] add_ln700_9_fu_1670_p2;
reg   [2:0] add_ln700_9_reg_2782;
wire   [2:0] add_ln700_15_fu_1708_p2;
reg   [2:0] add_ln700_15_reg_2787;
wire   [2:0] add_ln700_20_fu_1746_p2;
reg   [2:0] add_ln700_20_reg_2792;
wire   [2:0] add_ln700_27_fu_1784_p2;
reg   [2:0] add_ln700_27_reg_2797;
wire   [4:0] add_ln700_22_fu_2316_p2;
reg   [4:0] add_ln700_22_reg_2802;
wire   [2:0] add_ln700_32_fu_2354_p2;
reg   [2:0] add_ln700_32_reg_2807;
wire   [2:0] add_ln700_38_fu_2392_p2;
reg   [2:0] add_ln700_38_reg_2812;
wire   [2:0] add_ln700_43_fu_2430_p2;
reg   [2:0] add_ln700_43_reg_2817;
wire   [7:0] add_ln700_47_fu_2491_p2;
reg    ap_enable_reg_pp0_iter1;
wire   [0:0] icmp_ln895_fu_2603_p2;
reg   [0:0] icmp_ln895_reg_2827;
wire    ap_CS_fsm_state7;
wire   [7:0] select_ln67_fu_2615_p3;
reg   [7:0] select_ln67_reg_2832;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
wire    ap_block_pp0_stage1_subdone;
reg   [11:0] indvar_flatten16_reg_208;
wire    ap_CS_fsm_state8;
reg   [5:0] n_0_reg_219;
reg   [7:0] indvar_flatten_reg_230;
reg   [3:0] x_0_reg_242;
reg   [3:0] y_0_reg_253;
reg   [1:0] ap_phi_mux_c_0_phi_fu_280_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln81_1_fu_453_p1;
wire   [63:0] zext_ln76_56_fu_560_p1;
wire   [63:0] zext_ln76_57_fu_570_p1;
wire  signed [63:0] sext_ln76_fu_589_p1;
wire   [63:0] zext_ln76_58_fu_596_p1;
wire    ap_block_pp0_stage1;
wire   [5:0] n_fu_299_p2;
wire   [7:0] tmp_s_fu_331_p3;
wire   [7:0] zext_ln76_fu_327_p1;
wire   [4:0] trunc_ln76_fu_349_p1;
wire   [0:0] icmp_ln68_fu_373_p2;
wire   [0:0] xor_ln76_96_fu_367_p2;
wire   [3:0] select_ln76_fu_311_p3;
wire   [0:0] and_ln76_fu_379_p2;
wire   [0:0] or_ln81_fu_391_p2;
wire   [3:0] x_fu_385_p2;
wire   [3:0] select_ln81_fu_397_p3;
wire   [6:0] tmp_19_fu_417_p3;
wire   [4:0] tmp_20_fu_429_p3;
wire   [7:0] zext_ln76_2_fu_425_p1;
wire   [7:0] zext_ln76_3_fu_437_p1;
wire   [7:0] zext_ln81_fu_413_p1;
wire   [7:0] add_ln81_fu_447_p2;
wire   [6:0] tmp_21_fu_464_p3;
wire   [4:0] tmp_22_fu_476_p3;
wire   [7:0] zext_ln76_4_fu_472_p1;
wire   [7:0] zext_ln76_5_fu_484_p1;
wire   [3:0] add_ln76_2_fu_494_p2;
wire   [6:0] tmp_23_fu_500_p3;
wire   [4:0] tmp_24_fu_512_p3;
wire   [7:0] zext_ln76_53_fu_508_p1;
wire   [7:0] zext_ln76_54_fu_520_p1;
wire   [3:0] zext_ln70_fu_542_p1;
wire   [3:0] add_ln76_fu_546_p2;
wire   [7:0] zext_ln76_55_fu_551_p1;
wire   [7:0] add_ln76_6_fu_555_p2;
wire   [7:0] add_ln76_7_fu_565_p2;
wire   [7:0] zext_ln76_59_fu_580_p1;
wire   [7:0] add_ln76_9_fu_584_p2;
wire   [0:0] trunc_ln76_1_fu_600_p1;
wire   [0:0] trunc_ln76_2_fu_604_p1;
wire   [0:0] xor_ln76_fu_608_p2;
wire   [0:0] xor_ln76_1_fu_614_p2;
wire   [0:0] tmp_784_fu_624_p3;
wire   [0:0] tmp_785_fu_632_p3;
wire   [0:0] xor_ln76_2_fu_640_p2;
wire   [0:0] xor_ln76_3_fu_646_p2;
wire   [0:0] tmp_786_fu_656_p3;
wire   [0:0] tmp_787_fu_664_p3;
wire   [0:0] xor_ln76_4_fu_672_p2;
wire   [0:0] xor_ln76_5_fu_678_p2;
wire   [0:0] tmp_788_fu_688_p3;
wire   [0:0] tmp_789_fu_696_p3;
wire   [0:0] xor_ln76_6_fu_704_p2;
wire   [0:0] xor_ln76_7_fu_710_p2;
wire   [0:0] tmp_790_fu_720_p3;
wire   [0:0] tmp_791_fu_728_p3;
wire   [0:0] xor_ln76_8_fu_736_p2;
wire   [0:0] xor_ln76_9_fu_742_p2;
wire   [0:0] tmp_792_fu_752_p3;
wire   [0:0] tmp_793_fu_760_p3;
wire   [0:0] xor_ln76_10_fu_768_p2;
wire   [0:0] xor_ln76_11_fu_774_p2;
wire   [0:0] tmp_794_fu_784_p3;
wire   [0:0] tmp_795_fu_792_p3;
wire   [0:0] xor_ln76_12_fu_800_p2;
wire   [0:0] xor_ln76_13_fu_806_p2;
wire   [0:0] tmp_796_fu_816_p3;
wire   [0:0] tmp_797_fu_824_p3;
wire   [0:0] xor_ln76_14_fu_832_p2;
wire   [0:0] xor_ln76_15_fu_838_p2;
wire   [0:0] tmp_798_fu_848_p3;
wire   [0:0] tmp_799_fu_856_p3;
wire   [0:0] xor_ln76_16_fu_864_p2;
wire   [0:0] xor_ln76_17_fu_870_p2;
wire   [0:0] tmp_800_fu_880_p3;
wire   [0:0] tmp_801_fu_888_p3;
wire   [0:0] xor_ln76_18_fu_896_p2;
wire   [0:0] xor_ln76_19_fu_902_p2;
wire   [0:0] tmp_802_fu_912_p3;
wire   [0:0] tmp_803_fu_920_p3;
wire   [0:0] xor_ln76_20_fu_928_p2;
wire   [0:0] xor_ln76_21_fu_934_p2;
wire   [0:0] tmp_804_fu_944_p3;
wire   [0:0] tmp_805_fu_952_p3;
wire   [0:0] xor_ln76_22_fu_960_p2;
wire   [0:0] xor_ln76_23_fu_966_p2;
wire   [0:0] tmp_806_fu_976_p3;
wire   [0:0] tmp_807_fu_984_p3;
wire   [0:0] xor_ln76_24_fu_992_p2;
wire   [0:0] xor_ln76_25_fu_998_p2;
wire   [0:0] tmp_808_fu_1008_p3;
wire   [0:0] tmp_809_fu_1016_p3;
wire   [0:0] xor_ln76_26_fu_1024_p2;
wire   [0:0] xor_ln76_27_fu_1030_p2;
wire   [0:0] tmp_810_fu_1040_p3;
wire   [0:0] tmp_811_fu_1048_p3;
wire   [0:0] xor_ln76_28_fu_1056_p2;
wire   [0:0] xor_ln76_29_fu_1062_p2;
wire   [0:0] tmp_812_fu_1072_p3;
wire   [0:0] tmp_813_fu_1080_p3;
wire   [0:0] xor_ln76_30_fu_1088_p2;
wire   [0:0] xor_ln76_31_fu_1094_p2;
wire   [0:0] trunc_ln76_3_fu_1104_p1;
wire   [0:0] trunc_ln76_4_fu_1108_p1;
wire   [0:0] xor_ln76_32_fu_1112_p2;
wire   [0:0] xor_ln76_33_fu_1118_p2;
wire   [0:0] tmp_814_fu_1128_p3;
wire   [0:0] tmp_815_fu_1136_p3;
wire   [0:0] xor_ln76_34_fu_1144_p2;
wire   [0:0] xor_ln76_35_fu_1150_p2;
wire   [0:0] tmp_816_fu_1160_p3;
wire   [0:0] tmp_817_fu_1168_p3;
wire   [0:0] xor_ln76_36_fu_1176_p2;
wire   [0:0] xor_ln76_37_fu_1182_p2;
wire   [0:0] tmp_818_fu_1192_p3;
wire   [0:0] tmp_819_fu_1200_p3;
wire   [0:0] xor_ln76_38_fu_1208_p2;
wire   [0:0] xor_ln76_39_fu_1214_p2;
wire   [0:0] tmp_820_fu_1224_p3;
wire   [0:0] tmp_821_fu_1232_p3;
wire   [0:0] xor_ln76_40_fu_1240_p2;
wire   [0:0] xor_ln76_41_fu_1246_p2;
wire   [0:0] tmp_822_fu_1256_p3;
wire   [0:0] tmp_823_fu_1264_p3;
wire   [0:0] xor_ln76_42_fu_1272_p2;
wire   [0:0] xor_ln76_43_fu_1278_p2;
wire   [0:0] tmp_824_fu_1288_p3;
wire   [0:0] tmp_825_fu_1296_p3;
wire   [0:0] xor_ln76_44_fu_1304_p2;
wire   [0:0] xor_ln76_45_fu_1310_p2;
wire   [0:0] tmp_826_fu_1320_p3;
wire   [0:0] tmp_827_fu_1328_p3;
wire   [0:0] xor_ln76_46_fu_1336_p2;
wire   [0:0] xor_ln76_47_fu_1342_p2;
wire   [0:0] tmp_828_fu_1352_p3;
wire   [0:0] tmp_829_fu_1360_p3;
wire   [0:0] xor_ln76_48_fu_1368_p2;
wire   [0:0] xor_ln76_49_fu_1374_p2;
wire   [0:0] tmp_830_fu_1384_p3;
wire   [0:0] tmp_831_fu_1392_p3;
wire   [0:0] xor_ln76_50_fu_1400_p2;
wire   [0:0] xor_ln76_51_fu_1406_p2;
wire   [0:0] tmp_832_fu_1416_p3;
wire   [0:0] tmp_833_fu_1424_p3;
wire   [0:0] xor_ln76_52_fu_1432_p2;
wire   [0:0] xor_ln76_53_fu_1438_p2;
wire   [0:0] tmp_834_fu_1448_p3;
wire   [0:0] tmp_835_fu_1456_p3;
wire   [0:0] xor_ln76_54_fu_1464_p2;
wire   [0:0] xor_ln76_55_fu_1470_p2;
wire   [0:0] tmp_836_fu_1480_p3;
wire   [0:0] tmp_837_fu_1488_p3;
wire   [0:0] xor_ln76_56_fu_1496_p2;
wire   [0:0] xor_ln76_57_fu_1502_p2;
wire   [0:0] tmp_838_fu_1512_p3;
wire   [0:0] tmp_839_fu_1520_p3;
wire   [0:0] xor_ln76_58_fu_1528_p2;
wire   [0:0] xor_ln76_59_fu_1534_p2;
wire   [0:0] tmp_840_fu_1544_p3;
wire   [0:0] tmp_841_fu_1552_p3;
wire   [0:0] xor_ln76_60_fu_1560_p2;
wire   [0:0] tmp_842_fu_1572_p3;
wire   [0:0] tmp_843_fu_1580_p3;
wire   [0:0] xor_ln76_62_fu_1588_p2;
wire   [1:0] zext_ln76_7_fu_652_p1;
wire   [1:0] zext_ln76_8_fu_684_p1;
wire   [1:0] add_ln700_fu_1600_p2;
wire   [1:0] zext_ln76_6_fu_620_p1;
wire   [1:0] add_ln700_1_fu_1606_p2;
wire   [1:0] zext_ln76_10_fu_748_p1;
wire   [1:0] zext_ln76_11_fu_780_p1;
wire   [1:0] add_ln700_2_fu_1616_p2;
wire   [1:0] zext_ln76_9_fu_716_p1;
wire   [1:0] add_ln700_3_fu_1622_p2;
wire   [2:0] zext_ln700_2_fu_1628_p1;
wire   [2:0] zext_ln700_1_fu_1612_p1;
wire   [1:0] zext_ln76_13_fu_844_p1;
wire   [1:0] zext_ln76_14_fu_876_p1;
wire   [1:0] add_ln700_5_fu_1638_p2;
wire   [1:0] zext_ln76_12_fu_812_p1;
wire   [1:0] add_ln700_6_fu_1644_p2;
wire   [1:0] zext_ln76_16_fu_940_p1;
wire   [1:0] zext_ln76_17_fu_972_p1;
wire   [1:0] add_ln700_7_fu_1654_p2;
wire   [1:0] zext_ln76_15_fu_908_p1;
wire   [1:0] add_ln700_8_fu_1660_p2;
wire   [2:0] zext_ln700_5_fu_1666_p1;
wire   [2:0] zext_ln700_4_fu_1650_p1;
wire   [1:0] zext_ln76_19_fu_1036_p1;
wire   [1:0] zext_ln76_20_fu_1068_p1;
wire   [1:0] add_ln700_11_fu_1676_p2;
wire   [1:0] zext_ln76_18_fu_1004_p1;
wire   [1:0] add_ln700_12_fu_1682_p2;
wire   [1:0] zext_ln76_22_fu_1124_p1;
wire   [1:0] zext_ln76_23_fu_1156_p1;
wire   [1:0] add_ln700_13_fu_1692_p2;
wire   [1:0] zext_ln76_21_fu_1100_p1;
wire   [1:0] add_ln700_14_fu_1698_p2;
wire   [2:0] zext_ln700_9_fu_1704_p1;
wire   [2:0] zext_ln700_8_fu_1688_p1;
wire   [1:0] zext_ln76_25_fu_1220_p1;
wire   [1:0] zext_ln76_26_fu_1252_p1;
wire   [1:0] add_ln700_16_fu_1714_p2;
wire   [1:0] zext_ln76_24_fu_1188_p1;
wire   [1:0] add_ln700_17_fu_1720_p2;
wire   [1:0] zext_ln76_28_fu_1316_p1;
wire   [1:0] zext_ln76_29_fu_1348_p1;
wire   [1:0] add_ln700_18_fu_1730_p2;
wire   [1:0] zext_ln76_27_fu_1284_p1;
wire   [1:0] add_ln700_19_fu_1736_p2;
wire   [2:0] zext_ln700_12_fu_1742_p1;
wire   [2:0] zext_ln700_11_fu_1726_p1;
wire   [1:0] zext_ln76_31_fu_1412_p1;
wire   [1:0] zext_ln76_32_fu_1444_p1;
wire   [1:0] add_ln700_23_fu_1752_p2;
wire   [1:0] zext_ln76_30_fu_1380_p1;
wire   [1:0] add_ln700_24_fu_1758_p2;
wire   [1:0] zext_ln76_34_fu_1508_p1;
wire   [1:0] zext_ln76_35_fu_1540_p1;
wire   [1:0] add_ln700_25_fu_1768_p2;
wire   [1:0] zext_ln76_33_fu_1476_p1;
wire   [1:0] add_ln700_26_fu_1774_p2;
wire   [2:0] zext_ln700_17_fu_1780_p1;
wire   [2:0] zext_ln700_16_fu_1764_p1;
wire   [0:0] trunc_ln76_5_fu_1796_p1;
wire   [0:0] trunc_ln76_6_fu_1800_p1;
wire   [0:0] xor_ln76_64_fu_1803_p2;
wire   [0:0] xor_ln76_65_fu_1809_p2;
wire   [0:0] tmp_844_fu_1819_p3;
wire   [0:0] tmp_845_fu_1827_p3;
wire   [0:0] xor_ln76_66_fu_1834_p2;
wire   [0:0] xor_ln76_67_fu_1840_p2;
wire   [0:0] tmp_846_fu_1850_p3;
wire   [0:0] tmp_847_fu_1858_p3;
wire   [0:0] xor_ln76_68_fu_1865_p2;
wire   [0:0] xor_ln76_69_fu_1871_p2;
wire   [0:0] tmp_848_fu_1881_p3;
wire   [0:0] tmp_849_fu_1889_p3;
wire   [0:0] xor_ln76_70_fu_1896_p2;
wire   [0:0] xor_ln76_71_fu_1902_p2;
wire   [0:0] tmp_850_fu_1912_p3;
wire   [0:0] tmp_851_fu_1920_p3;
wire   [0:0] xor_ln76_72_fu_1927_p2;
wire   [0:0] xor_ln76_73_fu_1933_p2;
wire   [0:0] tmp_852_fu_1943_p3;
wire   [0:0] tmp_853_fu_1951_p3;
wire   [0:0] xor_ln76_74_fu_1958_p2;
wire   [0:0] xor_ln76_75_fu_1964_p2;
wire   [0:0] tmp_854_fu_1974_p3;
wire   [0:0] tmp_855_fu_1982_p3;
wire   [0:0] xor_ln76_76_fu_1989_p2;
wire   [0:0] xor_ln76_77_fu_1995_p2;
wire   [0:0] tmp_856_fu_2005_p3;
wire   [0:0] tmp_857_fu_2013_p3;
wire   [0:0] xor_ln76_78_fu_2020_p2;
wire   [0:0] xor_ln76_79_fu_2026_p2;
wire   [0:0] tmp_858_fu_2036_p3;
wire   [0:0] tmp_859_fu_2044_p3;
wire   [0:0] xor_ln76_80_fu_2051_p2;
wire   [0:0] xor_ln76_81_fu_2057_p2;
wire   [0:0] tmp_860_fu_2067_p3;
wire   [0:0] tmp_861_fu_2075_p3;
wire   [0:0] xor_ln76_82_fu_2082_p2;
wire   [0:0] xor_ln76_83_fu_2088_p2;
wire   [0:0] tmp_862_fu_2098_p3;
wire   [0:0] tmp_863_fu_2106_p3;
wire   [0:0] xor_ln76_84_fu_2113_p2;
wire   [0:0] xor_ln76_85_fu_2119_p2;
wire   [0:0] tmp_864_fu_2129_p3;
wire   [0:0] tmp_865_fu_2137_p3;
wire   [0:0] xor_ln76_86_fu_2144_p2;
wire   [0:0] xor_ln76_87_fu_2150_p2;
wire   [0:0] tmp_866_fu_2160_p3;
wire   [0:0] tmp_867_fu_2168_p3;
wire   [0:0] xor_ln76_88_fu_2175_p2;
wire   [0:0] xor_ln76_89_fu_2181_p2;
wire   [0:0] tmp_868_fu_2191_p3;
wire   [0:0] tmp_869_fu_2199_p3;
wire   [0:0] xor_ln76_90_fu_2206_p2;
wire   [0:0] xor_ln76_91_fu_2212_p2;
wire   [0:0] tmp_870_fu_2222_p3;
wire   [0:0] tmp_871_fu_2230_p3;
wire   [0:0] xor_ln76_92_fu_2237_p2;
wire   [0:0] xor_ln76_93_fu_2243_p2;
wire   [0:0] tmp_872_fu_2253_p3;
wire   [0:0] tmp_873_fu_2261_p3;
wire   [0:0] xor_ln76_94_fu_2268_p2;
wire   [0:0] xor_ln76_95_fu_2274_p2;
wire   [3:0] zext_ln700_6_fu_2287_p1;
wire   [3:0] zext_ln700_3_fu_2284_p1;
wire   [3:0] add_ln700_10_fu_2290_p2;
wire   [3:0] zext_ln700_13_fu_2303_p1;
wire   [3:0] zext_ln700_10_fu_2300_p1;
wire   [3:0] add_ln700_21_fu_2306_p2;
wire   [4:0] zext_ln700_14_fu_2312_p1;
wire   [4:0] zext_ln700_7_fu_2296_p1;
wire   [1:0] zext_ln76_37_fu_1793_p1;
wire   [1:0] zext_ln76_38_fu_1815_p1;
wire   [1:0] add_ln700_28_fu_2322_p2;
wire   [1:0] zext_ln76_36_fu_1790_p1;
wire   [1:0] add_ln700_29_fu_2328_p2;
wire   [1:0] zext_ln76_40_fu_1877_p1;
wire   [1:0] zext_ln76_41_fu_1908_p1;
wire   [1:0] add_ln700_30_fu_2338_p2;
wire   [1:0] zext_ln76_39_fu_1846_p1;
wire   [1:0] add_ln700_31_fu_2344_p2;
wire   [2:0] zext_ln700_20_fu_2350_p1;
wire   [2:0] zext_ln700_19_fu_2334_p1;
wire   [1:0] zext_ln76_43_fu_1970_p1;
wire   [1:0] zext_ln76_44_fu_2001_p1;
wire   [1:0] add_ln700_34_fu_2360_p2;
wire   [1:0] zext_ln76_42_fu_1939_p1;
wire   [1:0] add_ln700_35_fu_2366_p2;
wire   [1:0] zext_ln76_46_fu_2063_p1;
wire   [1:0] zext_ln76_47_fu_2094_p1;
wire   [1:0] add_ln700_36_fu_2376_p2;
wire   [1:0] zext_ln76_45_fu_2032_p1;
wire   [1:0] add_ln700_37_fu_2382_p2;
wire   [2:0] zext_ln700_24_fu_2388_p1;
wire   [2:0] zext_ln700_23_fu_2372_p1;
wire   [1:0] zext_ln76_49_fu_2156_p1;
wire   [1:0] zext_ln76_50_fu_2187_p1;
wire   [1:0] add_ln700_39_fu_2398_p2;
wire   [1:0] zext_ln76_48_fu_2125_p1;
wire   [1:0] add_ln700_40_fu_2404_p2;
wire   [1:0] zext_ln76_52_fu_2249_p1;
wire   [1:0] zext_ln700_fu_2280_p1;
wire   [1:0] add_ln700_41_fu_2414_p2;
wire   [1:0] zext_ln76_51_fu_2218_p1;
wire   [1:0] add_ln700_42_fu_2420_p2;
wire   [2:0] zext_ln700_27_fu_2426_p1;
wire   [2:0] zext_ln700_26_fu_2410_p1;
wire   [3:0] zext_ln700_21_fu_2442_p1;
wire   [3:0] zext_ln700_18_fu_2439_p1;
wire   [3:0] add_ln700_33_fu_2445_p2;
wire   [3:0] zext_ln700_28_fu_2458_p1;
wire   [3:0] zext_ln700_25_fu_2455_p1;
wire   [3:0] add_ln700_44_fu_2461_p2;
wire   [4:0] zext_ln700_29_fu_2467_p1;
wire   [4:0] zext_ln700_22_fu_2451_p1;
wire   [4:0] add_ln700_45_fu_2471_p2;
wire   [5:0] zext_ln700_30_fu_2477_p1;
wire   [5:0] zext_ln700_15_fu_2436_p1;
wire   [5:0] add_ln700_46_fu_2481_p2;
wire   [7:0] zext_ln700_31_fu_2487_p1;
wire   [8:0] shl_ln_fu_2497_p3;
wire   [8:0] zext_ln895_fu_2515_p1;
wire   [8:0] zext_ln895_1_fu_2518_p1;
wire   [0:0] icmp_ln895_256_fu_2511_p2;
wire   [8:0] sub_ln895_fu_2521_p2;
wire   [8:0] sub_ln895_1_fu_2533_p2;
wire   [8:0] xor_ln895_fu_2527_p2;
wire   [8:0] select_ln895_fu_2539_p3;
wire   [8:0] select_ln895_2_fu_2555_p3;
wire   [8:0] sub_ln895_2_fu_2563_p2;
wire   [255:0] select_ln895_1_fu_2547_p3;
wire   [255:0] zext_ln895_2_fu_2569_p1;
wire   [255:0] zext_ln895_3_fu_2573_p1;
wire   [255:0] lshr_ln895_fu_2577_p2;
wire   [255:0] lshr_ln895_1_fu_2583_p2;
wire   [255:0] and_ln895_fu_2589_p2;
wire   [7:0] trunc_ln895_fu_2595_p1;
wire   [8:0] accum_V_fu_2505_p2;
wire  signed [8:0] sext_ln895_fu_2599_p1;
wire   [7:0] add_ln67_1_fu_2609_p2;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

conv_16_32_10_s_w_conv2_0 #(
    .DataWidth( 16 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
w_conv2_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w_conv2_0_address0),
    .ce0(w_conv2_0_ce0),
    .q0(w_conv2_0_q0)
);

conv_16_32_10_s_w_conv2_1 #(
    .DataWidth( 16 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
w_conv2_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w_conv2_1_address0),
    .ce0(w_conv2_1_ce0),
    .q0(w_conv2_1_q0)
);

conv_16_32_10_s_w_conv2_2 #(
    .DataWidth( 16 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
w_conv2_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w_conv2_2_address0),
    .ce0(w_conv2_2_ce0),
    .q0(w_conv2_2_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln66_fu_287_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((icmp_ln66_fu_287_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln66_fu_287_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        c_0_reg_276 <= 2'd0;
    end else if (((icmp_ln70_reg_2703 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        c_0_reg_276 <= c_reg_2707;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        indvar_flatten16_reg_208 <= add_ln66_reg_2635;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten16_reg_208 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        indvar_flatten_reg_230 <= select_ln67_reg_2832;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_230 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        n_0_reg_219 <= select_ln76_1_reg_2645;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        n_0_reg_219 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln66_fu_287_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        p_014_0_reg_264 <= 8'd0;
    end else if (((icmp_ln70_reg_2703_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        p_014_0_reg_264 <= add_ln700_47_fu_2491_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        x_0_reg_242 <= select_ln81_1_reg_2672;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        x_0_reg_242 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        y_0_reg_253 <= y_reg_2688;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        y_0_reg_253 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln66_reg_2635 <= add_ln66_fu_293_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln70_reg_2703 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        add_ln700_15_reg_2787 <= add_ln700_15_fu_1708_p2;
        add_ln700_20_reg_2792 <= add_ln700_20_fu_1746_p2;
        add_ln700_27_reg_2797 <= add_ln700_27_fu_1784_p2;
        add_ln700_4_reg_2777 <= add_ln700_4_fu_1632_p2;
        add_ln700_9_reg_2782 <= add_ln700_9_fu_1670_p2;
        w_conv2_2_load_reg_2757 <= w_conv2_2_q0;
        xor_ln76_61_reg_2747 <= xor_ln76_61_fu_1566_p2;
        xor_ln76_63_reg_2752 <= xor_ln76_63_fu_1594_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln70_reg_2703 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln700_22_reg_2802 <= add_ln700_22_fu_2316_p2;
        add_ln700_32_reg_2807 <= add_ln700_32_fu_2354_p2;
        add_ln700_38_reg_2812 <= add_ln700_38_fu_2392_p2;
        add_ln700_43_reg_2817 <= add_ln700_43_fu_2430_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln66_fu_287_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln76_1_reg_2678[7 : 1] <= add_ln76_1_fu_441_p2[7 : 1];
        add_ln76_4_reg_2693[7 : 1] <= add_ln76_4_fu_488_p2[7 : 1];
        add_ln76_5_reg_2698[7 : 1] <= add_ln76_5_fu_524_p2[7 : 1];
        icmp_ln67_reg_2640 <= icmp_ln67_fu_305_p2;
        or_ln76_reg_2666[7 : 3] <= or_ln76_fu_361_p2[7 : 3];
        output_addr_reg_2683 <= zext_ln81_1_fu_453_p1;
        p_cast97_mid2_v_reg_2660[7 : 3] <= p_cast97_mid2_v_fu_353_p3[7 : 3];
        select_ln76_1_reg_2645 <= select_ln76_1_fu_319_p3;
        select_ln81_1_reg_2672 <= select_ln81_1_fu_405_p3;
        sub_ln76_reg_2650 <= sub_ln76_fu_339_p2;
        y_reg_2688 <= y_fu_458_p2;
        zext_ln76_1_reg_2655[5 : 0] <= zext_ln76_1_fu_345_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln70_fu_530_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln76_8_reg_2722 <= add_ln76_8_fu_575_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        c_reg_2707 <= c_fu_536_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln70_reg_2703 <= icmp_ln70_fu_530_p2;
        icmp_ln70_reg_2703_pp0_iter1_reg <= icmp_ln70_reg_2703;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        icmp_ln895_reg_2827 <= icmp_ln895_fu_2603_p2;
        select_ln67_reg_2832 <= select_ln67_fu_2615_p3;
    end
end

always @ (*) begin
    if ((icmp_ln70_fu_530_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln66_fu_287_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln70_reg_2703 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_c_0_phi_fu_280_p4 = c_reg_2707;
    end else begin
        ap_phi_mux_c_0_phi_fu_280_p4 = c_0_reg_276;
    end
end

always @ (*) begin
    if (((icmp_ln66_fu_287_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            input_r_address0 = zext_ln76_58_fu_596_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            input_r_address0 = zext_ln76_56_fu_560_p1;
        end else begin
            input_r_address0 = 'bx;
        end
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_r_ce1 = 1'b1;
    end else begin
        input_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        w_conv2_0_ce0 = 1'b1;
    end else begin
        w_conv2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        w_conv2_1_ce0 = 1'b1;
    end else begin
        w_conv2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        w_conv2_2_ce0 = 1'b1;
    end else begin
        w_conv2_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln66_fu_287_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln70_fu_530_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln70_fu_530_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign accum_V_fu_2505_p2 = ($signed(9'd368) + $signed(shl_ln_fu_2497_p3));

assign add_ln66_fu_293_p2 = (indvar_flatten16_reg_208 + 12'd1);

assign add_ln67_1_fu_2609_p2 = (8'd1 + indvar_flatten_reg_230);

assign add_ln700_10_fu_2290_p2 = (zext_ln700_6_fu_2287_p1 + zext_ln700_3_fu_2284_p1);

assign add_ln700_11_fu_1676_p2 = (zext_ln76_19_fu_1036_p1 + zext_ln76_20_fu_1068_p1);

assign add_ln700_12_fu_1682_p2 = (add_ln700_11_fu_1676_p2 + zext_ln76_18_fu_1004_p1);

assign add_ln700_13_fu_1692_p2 = (zext_ln76_22_fu_1124_p1 + zext_ln76_23_fu_1156_p1);

assign add_ln700_14_fu_1698_p2 = (add_ln700_13_fu_1692_p2 + zext_ln76_21_fu_1100_p1);

assign add_ln700_15_fu_1708_p2 = (zext_ln700_9_fu_1704_p1 + zext_ln700_8_fu_1688_p1);

assign add_ln700_16_fu_1714_p2 = (zext_ln76_25_fu_1220_p1 + zext_ln76_26_fu_1252_p1);

assign add_ln700_17_fu_1720_p2 = (add_ln700_16_fu_1714_p2 + zext_ln76_24_fu_1188_p1);

assign add_ln700_18_fu_1730_p2 = (zext_ln76_28_fu_1316_p1 + zext_ln76_29_fu_1348_p1);

assign add_ln700_19_fu_1736_p2 = (add_ln700_18_fu_1730_p2 + zext_ln76_27_fu_1284_p1);

assign add_ln700_1_fu_1606_p2 = (add_ln700_fu_1600_p2 + zext_ln76_6_fu_620_p1);

assign add_ln700_20_fu_1746_p2 = (zext_ln700_12_fu_1742_p1 + zext_ln700_11_fu_1726_p1);

assign add_ln700_21_fu_2306_p2 = (zext_ln700_13_fu_2303_p1 + zext_ln700_10_fu_2300_p1);

assign add_ln700_22_fu_2316_p2 = (zext_ln700_14_fu_2312_p1 + zext_ln700_7_fu_2296_p1);

assign add_ln700_23_fu_1752_p2 = (zext_ln76_31_fu_1412_p1 + zext_ln76_32_fu_1444_p1);

assign add_ln700_24_fu_1758_p2 = (add_ln700_23_fu_1752_p2 + zext_ln76_30_fu_1380_p1);

assign add_ln700_25_fu_1768_p2 = (zext_ln76_34_fu_1508_p1 + zext_ln76_35_fu_1540_p1);

assign add_ln700_26_fu_1774_p2 = (add_ln700_25_fu_1768_p2 + zext_ln76_33_fu_1476_p1);

assign add_ln700_27_fu_1784_p2 = (zext_ln700_17_fu_1780_p1 + zext_ln700_16_fu_1764_p1);

assign add_ln700_28_fu_2322_p2 = (zext_ln76_37_fu_1793_p1 + zext_ln76_38_fu_1815_p1);

assign add_ln700_29_fu_2328_p2 = (add_ln700_28_fu_2322_p2 + zext_ln76_36_fu_1790_p1);

assign add_ln700_2_fu_1616_p2 = (zext_ln76_10_fu_748_p1 + zext_ln76_11_fu_780_p1);

assign add_ln700_30_fu_2338_p2 = (zext_ln76_40_fu_1877_p1 + zext_ln76_41_fu_1908_p1);

assign add_ln700_31_fu_2344_p2 = (add_ln700_30_fu_2338_p2 + zext_ln76_39_fu_1846_p1);

assign add_ln700_32_fu_2354_p2 = (zext_ln700_20_fu_2350_p1 + zext_ln700_19_fu_2334_p1);

assign add_ln700_33_fu_2445_p2 = (zext_ln700_21_fu_2442_p1 + zext_ln700_18_fu_2439_p1);

assign add_ln700_34_fu_2360_p2 = (zext_ln76_43_fu_1970_p1 + zext_ln76_44_fu_2001_p1);

assign add_ln700_35_fu_2366_p2 = (add_ln700_34_fu_2360_p2 + zext_ln76_42_fu_1939_p1);

assign add_ln700_36_fu_2376_p2 = (zext_ln76_46_fu_2063_p1 + zext_ln76_47_fu_2094_p1);

assign add_ln700_37_fu_2382_p2 = (add_ln700_36_fu_2376_p2 + zext_ln76_45_fu_2032_p1);

assign add_ln700_38_fu_2392_p2 = (zext_ln700_24_fu_2388_p1 + zext_ln700_23_fu_2372_p1);

assign add_ln700_39_fu_2398_p2 = (zext_ln76_49_fu_2156_p1 + zext_ln76_50_fu_2187_p1);

assign add_ln700_3_fu_1622_p2 = (add_ln700_2_fu_1616_p2 + zext_ln76_9_fu_716_p1);

assign add_ln700_40_fu_2404_p2 = (add_ln700_39_fu_2398_p2 + zext_ln76_48_fu_2125_p1);

assign add_ln700_41_fu_2414_p2 = (zext_ln76_52_fu_2249_p1 + zext_ln700_fu_2280_p1);

assign add_ln700_42_fu_2420_p2 = (add_ln700_41_fu_2414_p2 + zext_ln76_51_fu_2218_p1);

assign add_ln700_43_fu_2430_p2 = (zext_ln700_27_fu_2426_p1 + zext_ln700_26_fu_2410_p1);

assign add_ln700_44_fu_2461_p2 = (zext_ln700_28_fu_2458_p1 + zext_ln700_25_fu_2455_p1);

assign add_ln700_45_fu_2471_p2 = (zext_ln700_29_fu_2467_p1 + zext_ln700_22_fu_2451_p1);

assign add_ln700_46_fu_2481_p2 = (zext_ln700_30_fu_2477_p1 + zext_ln700_15_fu_2436_p1);

assign add_ln700_47_fu_2491_p2 = (p_014_0_reg_264 + zext_ln700_31_fu_2487_p1);

assign add_ln700_4_fu_1632_p2 = (zext_ln700_2_fu_1628_p1 + zext_ln700_1_fu_1612_p1);

assign add_ln700_5_fu_1638_p2 = (zext_ln76_13_fu_844_p1 + zext_ln76_14_fu_876_p1);

assign add_ln700_6_fu_1644_p2 = (add_ln700_5_fu_1638_p2 + zext_ln76_12_fu_812_p1);

assign add_ln700_7_fu_1654_p2 = (zext_ln76_16_fu_940_p1 + zext_ln76_17_fu_972_p1);

assign add_ln700_8_fu_1660_p2 = (add_ln700_7_fu_1654_p2 + zext_ln76_15_fu_908_p1);

assign add_ln700_9_fu_1670_p2 = (zext_ln700_5_fu_1666_p1 + zext_ln700_4_fu_1650_p1);

assign add_ln700_fu_1600_p2 = (zext_ln76_7_fu_652_p1 + zext_ln76_8_fu_684_p1);

assign add_ln76_1_fu_441_p2 = (zext_ln76_2_fu_425_p1 + zext_ln76_3_fu_437_p1);

assign add_ln76_2_fu_494_p2 = (4'd2 + select_ln81_fu_397_p3);

assign add_ln76_4_fu_488_p2 = (zext_ln76_4_fu_472_p1 + zext_ln76_5_fu_484_p1);

assign add_ln76_5_fu_524_p2 = (zext_ln76_53_fu_508_p1 + zext_ln76_54_fu_520_p1);

assign add_ln76_6_fu_555_p2 = (zext_ln76_55_fu_551_p1 + add_ln76_1_reg_2678);

assign add_ln76_7_fu_565_p2 = (zext_ln76_55_fu_551_p1 + add_ln76_4_reg_2693);

assign add_ln76_8_fu_575_p2 = (zext_ln76_55_fu_551_p1 + add_ln76_5_reg_2698);

assign add_ln76_9_fu_584_p2 = (zext_ln76_59_fu_580_p1 + sub_ln76_reg_2650);

assign add_ln76_fu_546_p2 = (select_ln81_1_reg_2672 + zext_ln70_fu_542_p1);

assign add_ln81_fu_447_p2 = (zext_ln81_fu_413_p1 + zext_ln76_2_fu_425_p1);

assign and_ln76_fu_379_p2 = (xor_ln76_96_fu_367_p2 & icmp_ln68_fu_373_p2);

assign and_ln895_fu_2589_p2 = (lshr_ln895_fu_2577_p2 & lshr_ln895_1_fu_2583_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign c_fu_536_p2 = (ap_phi_mux_c_0_phi_fu_280_p4 + 2'd1);

assign icmp_ln66_fu_287_p2 = ((indvar_flatten16_reg_208 == 12'd2048) ? 1'b1 : 1'b0);

assign icmp_ln67_fu_305_p2 = ((indvar_flatten_reg_230 == 8'd64) ? 1'b1 : 1'b0);

assign icmp_ln68_fu_373_p2 = ((y_0_reg_253 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln70_fu_530_p2 = ((ap_phi_mux_c_0_phi_fu_280_p4 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln895_256_fu_2511_p2 = ((p_cast97_mid2_v_reg_2660 > or_ln76_reg_2666) ? 1'b1 : 1'b0);

assign icmp_ln895_fu_2603_p2 = (($signed(accum_V_fu_2505_p2) > $signed(sext_ln895_fu_2599_p1)) ? 1'b1 : 1'b0);

assign input_r_address1 = zext_ln76_57_fu_570_p1;

assign lshr_ln895_1_fu_2583_p2 = 256'd115792089237316195423570985008687907853269984665640564039457584007913129639935 >> zext_ln895_3_fu_2573_p1;

assign lshr_ln895_fu_2577_p2 = select_ln895_1_fu_2547_p3 >> zext_ln895_2_fu_2569_p1;

assign n_fu_299_p2 = (6'd1 + n_0_reg_219);

assign or_ln76_fu_361_p2 = (p_cast97_mid2_v_fu_353_p3 | 8'd7);

assign or_ln81_fu_391_p2 = (icmp_ln67_fu_305_p2 | and_ln76_fu_379_p2);

assign output_r_address0 = output_addr_reg_2683;

always @ (*) begin
    output_r_d0 = output_r_q0;
    output_r_d0[zext_ln76_1_reg_2655] = |(icmp_ln895_reg_2827);
end

assign p_cast97_mid2_v_fu_353_p3 = {{trunc_ln76_fu_349_p1}, {3'd0}};

assign select_ln67_fu_2615_p3 = ((icmp_ln67_reg_2640[0:0] === 1'b1) ? 8'd1 : add_ln67_1_fu_2609_p2);

assign select_ln76_1_fu_319_p3 = ((icmp_ln67_fu_305_p2[0:0] === 1'b1) ? n_fu_299_p2 : n_0_reg_219);

assign select_ln76_fu_311_p3 = ((icmp_ln67_fu_305_p2[0:0] === 1'b1) ? 4'd0 : x_0_reg_242);

assign select_ln81_1_fu_405_p3 = ((and_ln76_fu_379_p2[0:0] === 1'b1) ? x_fu_385_p2 : select_ln76_fu_311_p3);

assign select_ln81_fu_397_p3 = ((or_ln81_fu_391_p2[0:0] === 1'b1) ? 4'd0 : y_0_reg_253);

assign select_ln895_1_fu_2547_p3 = ((icmp_ln895_256_fu_2511_p2[0:0] === 1'b1) ? 256'd58008242875073907306580149496883896783888920335241385188161233481727752585408 : 256'd1362273596515493455816808735639618597925794909066372893357656913289324657665);

assign select_ln895_2_fu_2555_p3 = ((icmp_ln895_256_fu_2511_p2[0:0] === 1'b1) ? xor_ln895_fu_2527_p2 : zext_ln895_fu_2515_p1);

assign select_ln895_fu_2539_p3 = ((icmp_ln895_256_fu_2511_p2[0:0] === 1'b1) ? sub_ln895_fu_2521_p2 : sub_ln895_1_fu_2533_p2);

assign sext_ln76_fu_589_p1 = $signed(add_ln76_9_fu_584_p2);

assign sext_ln895_fu_2599_p1 = $signed(trunc_ln895_fu_2595_p1);

assign shl_ln_fu_2497_p3 = {{p_014_0_reg_264}, {1'd0}};

assign sub_ln76_fu_339_p2 = (tmp_s_fu_331_p3 - zext_ln76_fu_327_p1);

assign sub_ln895_1_fu_2533_p2 = (zext_ln895_1_fu_2518_p1 - zext_ln895_fu_2515_p1);

assign sub_ln895_2_fu_2563_p2 = (9'd255 - select_ln895_fu_2539_p3);

assign sub_ln895_fu_2521_p2 = (zext_ln895_fu_2515_p1 - zext_ln895_1_fu_2518_p1);

assign tmp_19_fu_417_p3 = {{select_ln81_fu_397_p3}, {3'd0}};

assign tmp_20_fu_429_p3 = {{select_ln81_fu_397_p3}, {1'd0}};

assign tmp_21_fu_464_p3 = {{y_fu_458_p2}, {3'd0}};

assign tmp_22_fu_476_p3 = {{y_fu_458_p2}, {1'd0}};

assign tmp_23_fu_500_p3 = {{add_ln76_2_fu_494_p2}, {3'd0}};

assign tmp_24_fu_512_p3 = {{add_ln76_2_fu_494_p2}, {1'd0}};

assign tmp_784_fu_624_p3 = input_r_q0[32'd1];

assign tmp_785_fu_632_p3 = w_conv2_0_q0[32'd1];

assign tmp_786_fu_656_p3 = input_r_q0[32'd2];

assign tmp_787_fu_664_p3 = w_conv2_0_q0[32'd2];

assign tmp_788_fu_688_p3 = input_r_q0[32'd3];

assign tmp_789_fu_696_p3 = w_conv2_0_q0[32'd3];

assign tmp_790_fu_720_p3 = input_r_q0[32'd4];

assign tmp_791_fu_728_p3 = w_conv2_0_q0[32'd4];

assign tmp_792_fu_752_p3 = input_r_q0[32'd5];

assign tmp_793_fu_760_p3 = w_conv2_0_q0[32'd5];

assign tmp_794_fu_784_p3 = input_r_q0[32'd6];

assign tmp_795_fu_792_p3 = w_conv2_0_q0[32'd6];

assign tmp_796_fu_816_p3 = input_r_q0[32'd7];

assign tmp_797_fu_824_p3 = w_conv2_0_q0[32'd7];

assign tmp_798_fu_848_p3 = input_r_q0[32'd8];

assign tmp_799_fu_856_p3 = w_conv2_0_q0[32'd8];

assign tmp_800_fu_880_p3 = input_r_q0[32'd9];

assign tmp_801_fu_888_p3 = w_conv2_0_q0[32'd9];

assign tmp_802_fu_912_p3 = input_r_q0[32'd10];

assign tmp_803_fu_920_p3 = w_conv2_0_q0[32'd10];

assign tmp_804_fu_944_p3 = input_r_q0[32'd11];

assign tmp_805_fu_952_p3 = w_conv2_0_q0[32'd11];

assign tmp_806_fu_976_p3 = input_r_q0[32'd12];

assign tmp_807_fu_984_p3 = w_conv2_0_q0[32'd12];

assign tmp_808_fu_1008_p3 = input_r_q0[32'd13];

assign tmp_809_fu_1016_p3 = w_conv2_0_q0[32'd13];

assign tmp_810_fu_1040_p3 = input_r_q0[32'd14];

assign tmp_811_fu_1048_p3 = w_conv2_0_q0[32'd14];

assign tmp_812_fu_1072_p3 = input_r_q0[32'd15];

assign tmp_813_fu_1080_p3 = w_conv2_0_q0[32'd15];

assign tmp_814_fu_1128_p3 = input_r_q1[32'd1];

assign tmp_815_fu_1136_p3 = w_conv2_1_q0[32'd1];

assign tmp_816_fu_1160_p3 = input_r_q1[32'd2];

assign tmp_817_fu_1168_p3 = w_conv2_1_q0[32'd2];

assign tmp_818_fu_1192_p3 = input_r_q1[32'd3];

assign tmp_819_fu_1200_p3 = w_conv2_1_q0[32'd3];

assign tmp_820_fu_1224_p3 = input_r_q1[32'd4];

assign tmp_821_fu_1232_p3 = w_conv2_1_q0[32'd4];

assign tmp_822_fu_1256_p3 = input_r_q1[32'd5];

assign tmp_823_fu_1264_p3 = w_conv2_1_q0[32'd5];

assign tmp_824_fu_1288_p3 = input_r_q1[32'd6];

assign tmp_825_fu_1296_p3 = w_conv2_1_q0[32'd6];

assign tmp_826_fu_1320_p3 = input_r_q1[32'd7];

assign tmp_827_fu_1328_p3 = w_conv2_1_q0[32'd7];

assign tmp_828_fu_1352_p3 = input_r_q1[32'd8];

assign tmp_829_fu_1360_p3 = w_conv2_1_q0[32'd8];

assign tmp_830_fu_1384_p3 = input_r_q1[32'd9];

assign tmp_831_fu_1392_p3 = w_conv2_1_q0[32'd9];

assign tmp_832_fu_1416_p3 = input_r_q1[32'd10];

assign tmp_833_fu_1424_p3 = w_conv2_1_q0[32'd10];

assign tmp_834_fu_1448_p3 = input_r_q1[32'd11];

assign tmp_835_fu_1456_p3 = w_conv2_1_q0[32'd11];

assign tmp_836_fu_1480_p3 = input_r_q1[32'd12];

assign tmp_837_fu_1488_p3 = w_conv2_1_q0[32'd12];

assign tmp_838_fu_1512_p3 = input_r_q1[32'd13];

assign tmp_839_fu_1520_p3 = w_conv2_1_q0[32'd13];

assign tmp_840_fu_1544_p3 = input_r_q1[32'd14];

assign tmp_841_fu_1552_p3 = w_conv2_1_q0[32'd14];

assign tmp_842_fu_1572_p3 = input_r_q1[32'd15];

assign tmp_843_fu_1580_p3 = w_conv2_1_q0[32'd15];

assign tmp_844_fu_1819_p3 = input_r_q0[32'd1];

assign tmp_845_fu_1827_p3 = w_conv2_2_load_reg_2757[32'd1];

assign tmp_846_fu_1850_p3 = input_r_q0[32'd2];

assign tmp_847_fu_1858_p3 = w_conv2_2_load_reg_2757[32'd2];

assign tmp_848_fu_1881_p3 = input_r_q0[32'd3];

assign tmp_849_fu_1889_p3 = w_conv2_2_load_reg_2757[32'd3];

assign tmp_850_fu_1912_p3 = input_r_q0[32'd4];

assign tmp_851_fu_1920_p3 = w_conv2_2_load_reg_2757[32'd4];

assign tmp_852_fu_1943_p3 = input_r_q0[32'd5];

assign tmp_853_fu_1951_p3 = w_conv2_2_load_reg_2757[32'd5];

assign tmp_854_fu_1974_p3 = input_r_q0[32'd6];

assign tmp_855_fu_1982_p3 = w_conv2_2_load_reg_2757[32'd6];

assign tmp_856_fu_2005_p3 = input_r_q0[32'd7];

assign tmp_857_fu_2013_p3 = w_conv2_2_load_reg_2757[32'd7];

assign tmp_858_fu_2036_p3 = input_r_q0[32'd8];

assign tmp_859_fu_2044_p3 = w_conv2_2_load_reg_2757[32'd8];

assign tmp_860_fu_2067_p3 = input_r_q0[32'd9];

assign tmp_861_fu_2075_p3 = w_conv2_2_load_reg_2757[32'd9];

assign tmp_862_fu_2098_p3 = input_r_q0[32'd10];

assign tmp_863_fu_2106_p3 = w_conv2_2_load_reg_2757[32'd10];

assign tmp_864_fu_2129_p3 = input_r_q0[32'd11];

assign tmp_865_fu_2137_p3 = w_conv2_2_load_reg_2757[32'd11];

assign tmp_866_fu_2160_p3 = input_r_q0[32'd12];

assign tmp_867_fu_2168_p3 = w_conv2_2_load_reg_2757[32'd12];

assign tmp_868_fu_2191_p3 = input_r_q0[32'd13];

assign tmp_869_fu_2199_p3 = w_conv2_2_load_reg_2757[32'd13];

assign tmp_870_fu_2222_p3 = input_r_q0[32'd14];

assign tmp_871_fu_2230_p3 = w_conv2_2_load_reg_2757[32'd14];

assign tmp_872_fu_2253_p3 = input_r_q0[32'd15];

assign tmp_873_fu_2261_p3 = w_conv2_2_load_reg_2757[32'd15];

assign tmp_s_fu_331_p3 = {{select_ln76_1_fu_319_p3}, {2'd0}};

assign trunc_ln76_1_fu_600_p1 = input_r_q0[0:0];

assign trunc_ln76_2_fu_604_p1 = w_conv2_0_q0[0:0];

assign trunc_ln76_3_fu_1104_p1 = input_r_q1[0:0];

assign trunc_ln76_4_fu_1108_p1 = w_conv2_1_q0[0:0];

assign trunc_ln76_5_fu_1796_p1 = input_r_q0[0:0];

assign trunc_ln76_6_fu_1800_p1 = w_conv2_2_load_reg_2757[0:0];

assign trunc_ln76_fu_349_p1 = select_ln76_1_fu_319_p3[4:0];

assign trunc_ln895_fu_2595_p1 = and_ln895_fu_2589_p2[7:0];

assign w_conv2_0_address0 = sext_ln76_fu_589_p1;

assign w_conv2_1_address0 = sext_ln76_fu_589_p1;

assign w_conv2_2_address0 = sext_ln76_fu_589_p1;

assign x_fu_385_p2 = (4'd1 + select_ln76_fu_311_p3);

assign xor_ln76_10_fu_768_p2 = (tmp_793_fu_760_p3 ^ tmp_792_fu_752_p3);

assign xor_ln76_11_fu_774_p2 = (xor_ln76_10_fu_768_p2 ^ 1'd1);

assign xor_ln76_12_fu_800_p2 = (tmp_795_fu_792_p3 ^ tmp_794_fu_784_p3);

assign xor_ln76_13_fu_806_p2 = (xor_ln76_12_fu_800_p2 ^ 1'd1);

assign xor_ln76_14_fu_832_p2 = (tmp_797_fu_824_p3 ^ tmp_796_fu_816_p3);

assign xor_ln76_15_fu_838_p2 = (xor_ln76_14_fu_832_p2 ^ 1'd1);

assign xor_ln76_16_fu_864_p2 = (tmp_799_fu_856_p3 ^ tmp_798_fu_848_p3);

assign xor_ln76_17_fu_870_p2 = (xor_ln76_16_fu_864_p2 ^ 1'd1);

assign xor_ln76_18_fu_896_p2 = (tmp_801_fu_888_p3 ^ tmp_800_fu_880_p3);

assign xor_ln76_19_fu_902_p2 = (xor_ln76_18_fu_896_p2 ^ 1'd1);

assign xor_ln76_1_fu_614_p2 = (xor_ln76_fu_608_p2 ^ 1'd1);

assign xor_ln76_20_fu_928_p2 = (tmp_803_fu_920_p3 ^ tmp_802_fu_912_p3);

assign xor_ln76_21_fu_934_p2 = (xor_ln76_20_fu_928_p2 ^ 1'd1);

assign xor_ln76_22_fu_960_p2 = (tmp_805_fu_952_p3 ^ tmp_804_fu_944_p3);

assign xor_ln76_23_fu_966_p2 = (xor_ln76_22_fu_960_p2 ^ 1'd1);

assign xor_ln76_24_fu_992_p2 = (tmp_807_fu_984_p3 ^ tmp_806_fu_976_p3);

assign xor_ln76_25_fu_998_p2 = (xor_ln76_24_fu_992_p2 ^ 1'd1);

assign xor_ln76_26_fu_1024_p2 = (tmp_809_fu_1016_p3 ^ tmp_808_fu_1008_p3);

assign xor_ln76_27_fu_1030_p2 = (xor_ln76_26_fu_1024_p2 ^ 1'd1);

assign xor_ln76_28_fu_1056_p2 = (tmp_811_fu_1048_p3 ^ tmp_810_fu_1040_p3);

assign xor_ln76_29_fu_1062_p2 = (xor_ln76_28_fu_1056_p2 ^ 1'd1);

assign xor_ln76_2_fu_640_p2 = (tmp_785_fu_632_p3 ^ tmp_784_fu_624_p3);

assign xor_ln76_30_fu_1088_p2 = (tmp_813_fu_1080_p3 ^ tmp_812_fu_1072_p3);

assign xor_ln76_31_fu_1094_p2 = (xor_ln76_30_fu_1088_p2 ^ 1'd1);

assign xor_ln76_32_fu_1112_p2 = (trunc_ln76_4_fu_1108_p1 ^ trunc_ln76_3_fu_1104_p1);

assign xor_ln76_33_fu_1118_p2 = (xor_ln76_32_fu_1112_p2 ^ 1'd1);

assign xor_ln76_34_fu_1144_p2 = (tmp_815_fu_1136_p3 ^ tmp_814_fu_1128_p3);

assign xor_ln76_35_fu_1150_p2 = (xor_ln76_34_fu_1144_p2 ^ 1'd1);

assign xor_ln76_36_fu_1176_p2 = (tmp_817_fu_1168_p3 ^ tmp_816_fu_1160_p3);

assign xor_ln76_37_fu_1182_p2 = (xor_ln76_36_fu_1176_p2 ^ 1'd1);

assign xor_ln76_38_fu_1208_p2 = (tmp_819_fu_1200_p3 ^ tmp_818_fu_1192_p3);

assign xor_ln76_39_fu_1214_p2 = (xor_ln76_38_fu_1208_p2 ^ 1'd1);

assign xor_ln76_3_fu_646_p2 = (xor_ln76_2_fu_640_p2 ^ 1'd1);

assign xor_ln76_40_fu_1240_p2 = (tmp_821_fu_1232_p3 ^ tmp_820_fu_1224_p3);

assign xor_ln76_41_fu_1246_p2 = (xor_ln76_40_fu_1240_p2 ^ 1'd1);

assign xor_ln76_42_fu_1272_p2 = (tmp_823_fu_1264_p3 ^ tmp_822_fu_1256_p3);

assign xor_ln76_43_fu_1278_p2 = (xor_ln76_42_fu_1272_p2 ^ 1'd1);

assign xor_ln76_44_fu_1304_p2 = (tmp_825_fu_1296_p3 ^ tmp_824_fu_1288_p3);

assign xor_ln76_45_fu_1310_p2 = (xor_ln76_44_fu_1304_p2 ^ 1'd1);

assign xor_ln76_46_fu_1336_p2 = (tmp_827_fu_1328_p3 ^ tmp_826_fu_1320_p3);

assign xor_ln76_47_fu_1342_p2 = (xor_ln76_46_fu_1336_p2 ^ 1'd1);

assign xor_ln76_48_fu_1368_p2 = (tmp_829_fu_1360_p3 ^ tmp_828_fu_1352_p3);

assign xor_ln76_49_fu_1374_p2 = (xor_ln76_48_fu_1368_p2 ^ 1'd1);

assign xor_ln76_4_fu_672_p2 = (tmp_787_fu_664_p3 ^ tmp_786_fu_656_p3);

assign xor_ln76_50_fu_1400_p2 = (tmp_831_fu_1392_p3 ^ tmp_830_fu_1384_p3);

assign xor_ln76_51_fu_1406_p2 = (xor_ln76_50_fu_1400_p2 ^ 1'd1);

assign xor_ln76_52_fu_1432_p2 = (tmp_833_fu_1424_p3 ^ tmp_832_fu_1416_p3);

assign xor_ln76_53_fu_1438_p2 = (xor_ln76_52_fu_1432_p2 ^ 1'd1);

assign xor_ln76_54_fu_1464_p2 = (tmp_835_fu_1456_p3 ^ tmp_834_fu_1448_p3);

assign xor_ln76_55_fu_1470_p2 = (xor_ln76_54_fu_1464_p2 ^ 1'd1);

assign xor_ln76_56_fu_1496_p2 = (tmp_837_fu_1488_p3 ^ tmp_836_fu_1480_p3);

assign xor_ln76_57_fu_1502_p2 = (xor_ln76_56_fu_1496_p2 ^ 1'd1);

assign xor_ln76_58_fu_1528_p2 = (tmp_839_fu_1520_p3 ^ tmp_838_fu_1512_p3);

assign xor_ln76_59_fu_1534_p2 = (xor_ln76_58_fu_1528_p2 ^ 1'd1);

assign xor_ln76_5_fu_678_p2 = (xor_ln76_4_fu_672_p2 ^ 1'd1);

assign xor_ln76_60_fu_1560_p2 = (tmp_841_fu_1552_p3 ^ tmp_840_fu_1544_p3);

assign xor_ln76_61_fu_1566_p2 = (xor_ln76_60_fu_1560_p2 ^ 1'd1);

assign xor_ln76_62_fu_1588_p2 = (tmp_843_fu_1580_p3 ^ tmp_842_fu_1572_p3);

assign xor_ln76_63_fu_1594_p2 = (xor_ln76_62_fu_1588_p2 ^ 1'd1);

assign xor_ln76_64_fu_1803_p2 = (trunc_ln76_6_fu_1800_p1 ^ trunc_ln76_5_fu_1796_p1);

assign xor_ln76_65_fu_1809_p2 = (xor_ln76_64_fu_1803_p2 ^ 1'd1);

assign xor_ln76_66_fu_1834_p2 = (tmp_845_fu_1827_p3 ^ tmp_844_fu_1819_p3);

assign xor_ln76_67_fu_1840_p2 = (xor_ln76_66_fu_1834_p2 ^ 1'd1);

assign xor_ln76_68_fu_1865_p2 = (tmp_847_fu_1858_p3 ^ tmp_846_fu_1850_p3);

assign xor_ln76_69_fu_1871_p2 = (xor_ln76_68_fu_1865_p2 ^ 1'd1);

assign xor_ln76_6_fu_704_p2 = (tmp_789_fu_696_p3 ^ tmp_788_fu_688_p3);

assign xor_ln76_70_fu_1896_p2 = (tmp_849_fu_1889_p3 ^ tmp_848_fu_1881_p3);

assign xor_ln76_71_fu_1902_p2 = (xor_ln76_70_fu_1896_p2 ^ 1'd1);

assign xor_ln76_72_fu_1927_p2 = (tmp_851_fu_1920_p3 ^ tmp_850_fu_1912_p3);

assign xor_ln76_73_fu_1933_p2 = (xor_ln76_72_fu_1927_p2 ^ 1'd1);

assign xor_ln76_74_fu_1958_p2 = (tmp_853_fu_1951_p3 ^ tmp_852_fu_1943_p3);

assign xor_ln76_75_fu_1964_p2 = (xor_ln76_74_fu_1958_p2 ^ 1'd1);

assign xor_ln76_76_fu_1989_p2 = (tmp_855_fu_1982_p3 ^ tmp_854_fu_1974_p3);

assign xor_ln76_77_fu_1995_p2 = (xor_ln76_76_fu_1989_p2 ^ 1'd1);

assign xor_ln76_78_fu_2020_p2 = (tmp_857_fu_2013_p3 ^ tmp_856_fu_2005_p3);

assign xor_ln76_79_fu_2026_p2 = (xor_ln76_78_fu_2020_p2 ^ 1'd1);

assign xor_ln76_7_fu_710_p2 = (xor_ln76_6_fu_704_p2 ^ 1'd1);

assign xor_ln76_80_fu_2051_p2 = (tmp_859_fu_2044_p3 ^ tmp_858_fu_2036_p3);

assign xor_ln76_81_fu_2057_p2 = (xor_ln76_80_fu_2051_p2 ^ 1'd1);

assign xor_ln76_82_fu_2082_p2 = (tmp_861_fu_2075_p3 ^ tmp_860_fu_2067_p3);

assign xor_ln76_83_fu_2088_p2 = (xor_ln76_82_fu_2082_p2 ^ 1'd1);

assign xor_ln76_84_fu_2113_p2 = (tmp_863_fu_2106_p3 ^ tmp_862_fu_2098_p3);

assign xor_ln76_85_fu_2119_p2 = (xor_ln76_84_fu_2113_p2 ^ 1'd1);

assign xor_ln76_86_fu_2144_p2 = (tmp_865_fu_2137_p3 ^ tmp_864_fu_2129_p3);

assign xor_ln76_87_fu_2150_p2 = (xor_ln76_86_fu_2144_p2 ^ 1'd1);

assign xor_ln76_88_fu_2175_p2 = (tmp_867_fu_2168_p3 ^ tmp_866_fu_2160_p3);

assign xor_ln76_89_fu_2181_p2 = (xor_ln76_88_fu_2175_p2 ^ 1'd1);

assign xor_ln76_8_fu_736_p2 = (tmp_791_fu_728_p3 ^ tmp_790_fu_720_p3);

assign xor_ln76_90_fu_2206_p2 = (tmp_869_fu_2199_p3 ^ tmp_868_fu_2191_p3);

assign xor_ln76_91_fu_2212_p2 = (xor_ln76_90_fu_2206_p2 ^ 1'd1);

assign xor_ln76_92_fu_2237_p2 = (tmp_871_fu_2230_p3 ^ tmp_870_fu_2222_p3);

assign xor_ln76_93_fu_2243_p2 = (xor_ln76_92_fu_2237_p2 ^ 1'd1);

assign xor_ln76_94_fu_2268_p2 = (tmp_873_fu_2261_p3 ^ tmp_872_fu_2253_p3);

assign xor_ln76_95_fu_2274_p2 = (xor_ln76_94_fu_2268_p2 ^ 1'd1);

assign xor_ln76_96_fu_367_p2 = (icmp_ln67_fu_305_p2 ^ 1'd1);

assign xor_ln76_9_fu_742_p2 = (xor_ln76_8_fu_736_p2 ^ 1'd1);

assign xor_ln76_fu_608_p2 = (trunc_ln76_2_fu_604_p1 ^ trunc_ln76_1_fu_600_p1);

assign xor_ln895_fu_2527_p2 = (zext_ln895_fu_2515_p1 ^ 9'd255);

assign y_fu_458_p2 = (4'd1 + select_ln81_fu_397_p3);

assign zext_ln700_10_fu_2300_p1 = add_ln700_15_reg_2787;

assign zext_ln700_11_fu_1726_p1 = add_ln700_17_fu_1720_p2;

assign zext_ln700_12_fu_1742_p1 = add_ln700_19_fu_1736_p2;

assign zext_ln700_13_fu_2303_p1 = add_ln700_20_reg_2792;

assign zext_ln700_14_fu_2312_p1 = add_ln700_21_fu_2306_p2;

assign zext_ln700_15_fu_2436_p1 = add_ln700_22_reg_2802;

assign zext_ln700_16_fu_1764_p1 = add_ln700_24_fu_1758_p2;

assign zext_ln700_17_fu_1780_p1 = add_ln700_26_fu_1774_p2;

assign zext_ln700_18_fu_2439_p1 = add_ln700_27_reg_2797;

assign zext_ln700_19_fu_2334_p1 = add_ln700_29_fu_2328_p2;

assign zext_ln700_1_fu_1612_p1 = add_ln700_1_fu_1606_p2;

assign zext_ln700_20_fu_2350_p1 = add_ln700_31_fu_2344_p2;

assign zext_ln700_21_fu_2442_p1 = add_ln700_32_reg_2807;

assign zext_ln700_22_fu_2451_p1 = add_ln700_33_fu_2445_p2;

assign zext_ln700_23_fu_2372_p1 = add_ln700_35_fu_2366_p2;

assign zext_ln700_24_fu_2388_p1 = add_ln700_37_fu_2382_p2;

assign zext_ln700_25_fu_2455_p1 = add_ln700_38_reg_2812;

assign zext_ln700_26_fu_2410_p1 = add_ln700_40_fu_2404_p2;

assign zext_ln700_27_fu_2426_p1 = add_ln700_42_fu_2420_p2;

assign zext_ln700_28_fu_2458_p1 = add_ln700_43_reg_2817;

assign zext_ln700_29_fu_2467_p1 = add_ln700_44_fu_2461_p2;

assign zext_ln700_2_fu_1628_p1 = add_ln700_3_fu_1622_p2;

assign zext_ln700_30_fu_2477_p1 = add_ln700_45_fu_2471_p2;

assign zext_ln700_31_fu_2487_p1 = add_ln700_46_fu_2481_p2;

assign zext_ln700_3_fu_2284_p1 = add_ln700_4_reg_2777;

assign zext_ln700_4_fu_1650_p1 = add_ln700_6_fu_1644_p2;

assign zext_ln700_5_fu_1666_p1 = add_ln700_8_fu_1660_p2;

assign zext_ln700_6_fu_2287_p1 = add_ln700_9_reg_2782;

assign zext_ln700_7_fu_2296_p1 = add_ln700_10_fu_2290_p2;

assign zext_ln700_8_fu_1688_p1 = add_ln700_12_fu_1682_p2;

assign zext_ln700_9_fu_1704_p1 = add_ln700_14_fu_1698_p2;

assign zext_ln700_fu_2280_p1 = xor_ln76_95_fu_2274_p2;

assign zext_ln70_fu_542_p1 = ap_phi_mux_c_0_phi_fu_280_p4;

assign zext_ln76_10_fu_748_p1 = xor_ln76_9_fu_742_p2;

assign zext_ln76_11_fu_780_p1 = xor_ln76_11_fu_774_p2;

assign zext_ln76_12_fu_812_p1 = xor_ln76_13_fu_806_p2;

assign zext_ln76_13_fu_844_p1 = xor_ln76_15_fu_838_p2;

assign zext_ln76_14_fu_876_p1 = xor_ln76_17_fu_870_p2;

assign zext_ln76_15_fu_908_p1 = xor_ln76_19_fu_902_p2;

assign zext_ln76_16_fu_940_p1 = xor_ln76_21_fu_934_p2;

assign zext_ln76_17_fu_972_p1 = xor_ln76_23_fu_966_p2;

assign zext_ln76_18_fu_1004_p1 = xor_ln76_25_fu_998_p2;

assign zext_ln76_19_fu_1036_p1 = xor_ln76_27_fu_1030_p2;

assign zext_ln76_1_fu_345_p1 = select_ln76_1_fu_319_p3;

assign zext_ln76_20_fu_1068_p1 = xor_ln76_29_fu_1062_p2;

assign zext_ln76_21_fu_1100_p1 = xor_ln76_31_fu_1094_p2;

assign zext_ln76_22_fu_1124_p1 = xor_ln76_33_fu_1118_p2;

assign zext_ln76_23_fu_1156_p1 = xor_ln76_35_fu_1150_p2;

assign zext_ln76_24_fu_1188_p1 = xor_ln76_37_fu_1182_p2;

assign zext_ln76_25_fu_1220_p1 = xor_ln76_39_fu_1214_p2;

assign zext_ln76_26_fu_1252_p1 = xor_ln76_41_fu_1246_p2;

assign zext_ln76_27_fu_1284_p1 = xor_ln76_43_fu_1278_p2;

assign zext_ln76_28_fu_1316_p1 = xor_ln76_45_fu_1310_p2;

assign zext_ln76_29_fu_1348_p1 = xor_ln76_47_fu_1342_p2;

assign zext_ln76_2_fu_425_p1 = tmp_19_fu_417_p3;

assign zext_ln76_30_fu_1380_p1 = xor_ln76_49_fu_1374_p2;

assign zext_ln76_31_fu_1412_p1 = xor_ln76_51_fu_1406_p2;

assign zext_ln76_32_fu_1444_p1 = xor_ln76_53_fu_1438_p2;

assign zext_ln76_33_fu_1476_p1 = xor_ln76_55_fu_1470_p2;

assign zext_ln76_34_fu_1508_p1 = xor_ln76_57_fu_1502_p2;

assign zext_ln76_35_fu_1540_p1 = xor_ln76_59_fu_1534_p2;

assign zext_ln76_36_fu_1790_p1 = xor_ln76_61_reg_2747;

assign zext_ln76_37_fu_1793_p1 = xor_ln76_63_reg_2752;

assign zext_ln76_38_fu_1815_p1 = xor_ln76_65_fu_1809_p2;

assign zext_ln76_39_fu_1846_p1 = xor_ln76_67_fu_1840_p2;

assign zext_ln76_3_fu_437_p1 = tmp_20_fu_429_p3;

assign zext_ln76_40_fu_1877_p1 = xor_ln76_69_fu_1871_p2;

assign zext_ln76_41_fu_1908_p1 = xor_ln76_71_fu_1902_p2;

assign zext_ln76_42_fu_1939_p1 = xor_ln76_73_fu_1933_p2;

assign zext_ln76_43_fu_1970_p1 = xor_ln76_75_fu_1964_p2;

assign zext_ln76_44_fu_2001_p1 = xor_ln76_77_fu_1995_p2;

assign zext_ln76_45_fu_2032_p1 = xor_ln76_79_fu_2026_p2;

assign zext_ln76_46_fu_2063_p1 = xor_ln76_81_fu_2057_p2;

assign zext_ln76_47_fu_2094_p1 = xor_ln76_83_fu_2088_p2;

assign zext_ln76_48_fu_2125_p1 = xor_ln76_85_fu_2119_p2;

assign zext_ln76_49_fu_2156_p1 = xor_ln76_87_fu_2150_p2;

assign zext_ln76_4_fu_472_p1 = tmp_21_fu_464_p3;

assign zext_ln76_50_fu_2187_p1 = xor_ln76_89_fu_2181_p2;

assign zext_ln76_51_fu_2218_p1 = xor_ln76_91_fu_2212_p2;

assign zext_ln76_52_fu_2249_p1 = xor_ln76_93_fu_2243_p2;

assign zext_ln76_53_fu_508_p1 = tmp_23_fu_500_p3;

assign zext_ln76_54_fu_520_p1 = tmp_24_fu_512_p3;

assign zext_ln76_55_fu_551_p1 = add_ln76_fu_546_p2;

assign zext_ln76_56_fu_560_p1 = add_ln76_6_fu_555_p2;

assign zext_ln76_57_fu_570_p1 = add_ln76_7_fu_565_p2;

assign zext_ln76_58_fu_596_p1 = add_ln76_8_reg_2722;

assign zext_ln76_59_fu_580_p1 = ap_phi_mux_c_0_phi_fu_280_p4;

assign zext_ln76_5_fu_484_p1 = tmp_22_fu_476_p3;

assign zext_ln76_6_fu_620_p1 = xor_ln76_1_fu_614_p2;

assign zext_ln76_7_fu_652_p1 = xor_ln76_3_fu_646_p2;

assign zext_ln76_8_fu_684_p1 = xor_ln76_5_fu_678_p2;

assign zext_ln76_9_fu_716_p1 = xor_ln76_7_fu_710_p2;

assign zext_ln76_fu_327_p1 = select_ln76_1_fu_319_p3;

assign zext_ln81_1_fu_453_p1 = add_ln81_fu_447_p2;

assign zext_ln81_fu_413_p1 = select_ln81_1_fu_405_p3;

assign zext_ln895_1_fu_2518_p1 = or_ln76_reg_2666;

assign zext_ln895_2_fu_2569_p1 = select_ln895_2_fu_2555_p3;

assign zext_ln895_3_fu_2573_p1 = sub_ln895_2_fu_2563_p2;

assign zext_ln895_fu_2515_p1 = p_cast97_mid2_v_reg_2660;

always @ (posedge ap_clk) begin
    zext_ln76_1_reg_2655[6] <= 1'b0;
    p_cast97_mid2_v_reg_2660[2:0] <= 3'b000;
    or_ln76_reg_2666[2:0] <= 3'b111;
    add_ln76_1_reg_2678[0] <= 1'b0;
    add_ln76_4_reg_2693[0] <= 1'b0;
    add_ln76_5_reg_2698[0] <= 1'b0;
end

endmodule //conv_16_32_10_s
