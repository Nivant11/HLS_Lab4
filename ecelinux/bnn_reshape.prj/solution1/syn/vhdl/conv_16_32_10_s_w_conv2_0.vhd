-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_16_32_10_s_w_conv2_0_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 96
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_16_32_10_s_w_conv2_0_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0001111011111011", 1 => "0110000111110110", 2 => "0101110111110011", 
    3 => "1001111000101010", 4 => "1101100100100000", 5 => "0100101010110100", 
    6 => "0011111000001011", 7 => "1100000111100110", 8 => "0010001110010110", 
    9 => "1100111000101011", 10 => "0000000011101011", 11 => "1111110111101011", 
    12 => "1110100010001001", 13 => "0001001100011100", 14 => "0011111001101101", 
    15 => "1101100111110101", 16 => "1001111000011110", 17 => "0111111001111110", 
    18 => "1100010011110011", 19 => "1010000111000010", 20 => "1101110101111111", 
    21 => "1101100101000100", 22 => "0110011010001100", 23 => "0101010011111101", 
    24 => "1101110001001101", 25 => "1101111100101110", 26 => "1101110101101101", 
    27 => "1010111001011011", 28 => "1101111100100010", 29 => "1101110101100001", 
    30 => "1011100000100000", 31 => "0101011011101101", 32 => "1101111101101111", 
    33 => "1110110001010011", 34 => "0110100111010101", 35 => "0010110111111100", 
    36 => "1000110000001001", 37 => "0001011010101000", 38 => "0101110011110111", 
    39 => "1100111100101101", 40 => "0101110100011010", 41 => "0101110001111111", 
    42 => "0100101000011101", 43 => "0001111101011100", 44 => "0011101100001100", 
    45 => "1100111100101110", 46 => "0011011000001000", 47 => "1111111101101001", 
    48 => "1010000110100101", 49 => "0011001001000101", 50 => "0111100001110000", 
    51 => "0010111100100000", 52 => "0011011110110101", 53 => "0101111101011101", 
    54 => "0111110000111011", 55 => "1000111100100100", 56 => "1011011100001101", 
    57 => "0110011001101001", 58 => "0111111111111100", 59 => "0101110010111110", 
    60 => "0101111000101100", 61 => "1100110001110111", 62 => "1110001110000101", 
    63 => "0001111011101101", 64 => "0101110011101101", 65 => "0111010111110101", 
    66 => "0110101110010010", 67 => "0110000111110101", 68 => "1100110000101101", 
    69 => "0101001100001010", 70 => "1111001100100101", 71 => "1111011001001101", 
    72 => "0010001110011000", 73 => "1010001101001000", 74 => "0101111011110001", 
    75 => "0011011001111001", 76 => "1011110011000110", 77 => "0110011110000101", 
    78 => "0101111001110101", 79 => "0001101101111110", 80 => "0001111001001100", 
    81 => "0100111000011010", 82 => "1010001110100000", 83 => "1101110011110101", 
    84 => "1110100011010111", 85 => "1110001110001000", 86 => "0111111100001000", 
    87 => "1001110100100111", 88 => "1100110110011111", 89 => "1100110100010111", 
    90 => "0101010011110010", 91 => "0010001111010101", 92 => "1110101011110010", 
    93 => "0110000111010100", 94 => "0000011101000101", 95 => "1110110011110011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_16_32_10_s_w_conv2_0 is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 96;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_16_32_10_s_w_conv2_0 is
    component conv_16_32_10_s_w_conv2_0_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_16_32_10_s_w_conv2_0_rom_U :  component conv_16_32_10_s_w_conv2_0_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


