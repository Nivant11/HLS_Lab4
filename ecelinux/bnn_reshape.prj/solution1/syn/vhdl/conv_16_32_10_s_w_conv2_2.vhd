-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_16_32_10_s_w_conv2_2_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 96
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_16_32_10_s_w_conv2_2_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0100111001001110", 1 => "0011111000101000", 2 => "1101111000001111", 
    3 => "0101111011111101", 4 => "0010001101000000", 5 => "0111011101001001", 
    6 => "1011111011101010", 7 => "0110000010100000", 8 => "1101110001111011", 
    9 => "1001010000100001", 10 => "1101110000101001", 11 => "1101110000101101", 
    12 => "0111001010001010", 13 => "1111110111110111", 14 => "1111110101111111", 
    15 => "0001000001001111", 16 => "0101100111100110", 17 => "1110001110011100", 
    18 => "1101110001101111", 19 => "1101110101100101", 20 => "1000111000010110", 
    21 => "1100000100101100", 22 => "0001110111011000", 23 => "1111000111110111", 
    24 => "1010000100000110", 25 => "1111100011111001", 26 => "1101000111110110", 
    27 => "0111011100001101", 28 => "0011111000001001", 29 => "0101111000101101", 
    30 => "1101100011001111", 31 => "1011001011100100", 32 => "1011001001111000", 
    33 => "1001111000001111", 34 => "0101111000001100", 35 => "1101010000111111", 
    36 => "1100000001110110", 37 => "1100110100111111", 38 => "1101110000101111", 
    39 => "1100100101010110", 40 => "1100110101111101", 41 => "1001111101001100", 
    42 => "1110100011000010", 43 => "1101110100110111", 44 => "1101110001110111", 
    45 => "0100000111100111", 46 => "1100110011110111", 47 => "1100100000101110", 
    48 => "0011101010100111", 49 => "1100000011110110", 50 => "1101110111111101", 
    51 => "1010101001001100", 52 => "1011111100001000", 53 => "1011111100101001", 
    54 => "0101111101111111", 55 => "1110100111110111", 56 => "0111110101111101", 
    57 => "1001010100101010", 58 => "0001010000101011", 59 => "0101110111110001", 
    60 => "1100000010110110", 61 => "0111111010001001", 62 => "0111110011110110", 
    63 => "1000111000000011", 64 => "0001111000001100", 65 => "0011111000101011", 
    66 => "1101010001101111", 67 => "0001010000001111", 68 => "0010101100011011", 
    69 => "0111111101111000", 70 => "1111100100010101", 71 => "1110001110011010", 
    72 => "1101010101111101", 73 => "1111110110101111", 74 => "0111111110001100", 
    75 => "0101100000010111", 76 => "0001111100001101", 77 => "1001110000101111", 
    78 => "1010100000010110", 79 => "1100100010100010", 80 => "1100100001110010", 
    81 => "1001010110110100", 82 => "1111011011001101", 83 => "0101101010001001", 
    84 => "1111101000001010", 85 => "1101100000011010", 86 => "0101001011110101", 
    87 => "1001110100101101", 88 => "1001110000101110", 89 => "1101110111110111", 
    90 => "1100101100011100", 91 => "0101111100011111", 92 => "1001111100101111", 
    93 => "1101110100111011", 94 => "1010110100110110", 95 => "0001111101101101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_16_32_10_s_w_conv2_2 is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 96;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_16_32_10_s_w_conv2_2 is
    component conv_16_32_10_s_w_conv2_2_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_16_32_10_s_w_conv2_2_rom_U :  component conv_16_32_10_s_w_conv2_2_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


