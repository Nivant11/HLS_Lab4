-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_1_16_18_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (0 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of conv_1_16_18_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv13_1000 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv10_100 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_7 : STD_LOGIC_VECTOR (6 downto 0) := "0000111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_17 : STD_LOGIC_VECTOR (4 downto 0) := "10111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "01000000000000000000000010100000101111111111111101111111101111111111111101000000001000001000000010100000000000000111111111111111";
    constant ap_const_lv128_lc_2 : STD_LOGIC_VECTOR (127 downto 0) := "11111111111111100000000000000101000000010000010000000010111111111111110111111110111111111111110100000101000000000000000000000010";
    constant ap_const_lv128_lc_3 : STD_LOGIC_VECTOR (127 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal w_conv1_0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal w_conv1_0_ce0 : STD_LOGIC;
    signal w_conv1_0_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_conv1_1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal w_conv1_1_ce0 : STD_LOGIC;
    signal w_conv1_1_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_conv1_2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal w_conv1_2_ce0 : STD_LOGIC;
    signal w_conv1_2_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_014_0_reg_232 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_0_reg_244 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln66_fu_255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln66_fu_261_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln66_reg_773 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln67_fu_273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln67_reg_778 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln76_2_fu_287_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln76_2_reg_783 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln76_fu_307_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln76_reg_788 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln76_60_fu_313_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln76_60_reg_793 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_cast7_mid2_v_fu_321_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_cast7_mid2_v_reg_798 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln76_fu_329_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln76_reg_804 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln81_2_fu_373_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln81_2_reg_810 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln76_10_fu_409_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln76_10_reg_816 : STD_LOGIC_VECTOR (9 downto 0);
    signal output_addr_reg_821 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_fu_426_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal y_reg_826 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln76_12_fu_456_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln76_12_reg_831 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln76_13_fu_492_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln76_13_reg_836 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln70_fu_498_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_841 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal c_fu_504_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_reg_845 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal add_ln76_16_fu_543_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln76_16_reg_860 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state4_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal xor_ln76_96_fu_574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln76_96_reg_885 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln76_97_fu_586_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln76_97_reg_890 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_conv1_2_load_reg_895 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln700_2_fu_629_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal icmp_ln895_fu_741_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_reg_905 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal select_ln67_fu_753_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln67_reg_910 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal indvar_flatten16_reg_176 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal n_0_reg_187 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_reg_198 : STD_LOGIC_VECTOR (9 downto 0);
    signal x_0_reg_210 : STD_LOGIC_VECTOR (4 downto 0);
    signal y_0_reg_221 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_c_0_phi_fu_248_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln81_2_fu_421_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln76_68_fu_528_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln76_69_fu_538_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln76_fu_557_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln76_70_fu_564_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal n_fu_267_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_fu_299_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln76_fu_295_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln76_fu_317_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln68_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln76_101_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln76_fu_279_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln76_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln81_fu_359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_fu_353_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln81_fu_365_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_26_fu_385_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_27_fu_397_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln76_61_fu_393_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln76_62_fu_405_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln81_fu_381_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln81_fu_415_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_28_fu_432_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_29_fu_444_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln76_63_fu_440_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln76_64_fu_452_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln76_4_fu_462_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_30_fu_468_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_31_fu_480_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln76_65_fu_476_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln76_66_fu_488_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln70_fu_510_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln76_fu_514_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln76_67_fu_519_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln76_14_fu_523_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln76_15_fu_533_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln76_71_fu_548_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln76_17_fu_552_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal xor_ln76_fu_568_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln76_99_fu_580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln76_100_fu_598_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln76_98_fu_603_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln700_fu_609_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln76_54_fu_595_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln76_53_fu_592_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln700_fu_613_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln700_48_fu_619_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln700_32_fu_625_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_fu_635_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal accum_V_fu_643_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln895_fu_657_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln895_4_fu_660_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln895_257_fu_653_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln895_fu_663_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln895_3_fu_675_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln895_fu_669_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln895_fu_681_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln895_4_fu_697_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln895_4_fu_705_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln895_3_fu_689_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln895_5_fu_711_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln895_6_fu_715_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln895_fu_719_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln895_2_fu_725_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln895_fu_731_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal sext_ln895_fu_649_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln895_fu_737_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln67_2_fu_747_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component conv_1_16_18_s_w_conv1_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv_1_16_18_s_w_conv1_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv_1_16_18_s_w_conv1_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    w_conv1_0_U : component conv_1_16_18_s_w_conv1_0
    generic map (
        DataWidth => 1,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w_conv1_0_address0,
        ce0 => w_conv1_0_ce0,
        q0 => w_conv1_0_q0);

    w_conv1_1_U : component conv_1_16_18_s_w_conv1_1
    generic map (
        DataWidth => 1,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w_conv1_1_address0,
        ce0 => w_conv1_1_ce0,
        q0 => w_conv1_1_q0);

    w_conv1_2_U : component conv_1_16_18_s_w_conv1_2
    generic map (
        DataWidth => 1,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w_conv1_2_address0,
        ce0 => w_conv1_2_ce0,
        q0 => w_conv1_2_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln66_fu_255_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((icmp_ln66_fu_255_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln66_fu_255_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                c_0_reg_244 <= ap_const_lv2_0;
            elsif (((icmp_ln70_reg_841 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                c_0_reg_244 <= c_reg_845;
            end if; 
        end if;
    end process;

    indvar_flatten16_reg_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                indvar_flatten16_reg_176 <= add_ln66_reg_773;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten16_reg_176 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                indvar_flatten_reg_198 <= select_ln67_reg_910;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_198 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    n_0_reg_187_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                n_0_reg_187 <= select_ln76_2_reg_783;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                n_0_reg_187 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    p_014_0_reg_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln66_fu_255_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_014_0_reg_232 <= ap_const_lv4_0;
            elsif (((icmp_ln70_reg_841 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                p_014_0_reg_232 <= add_ln700_2_fu_629_p2;
            end if; 
        end if;
    end process;

    x_0_reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                x_0_reg_210 <= select_ln81_2_reg_810;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                x_0_reg_210 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    y_0_reg_221_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                y_0_reg_221 <= y_reg_826;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                y_0_reg_221 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln66_reg_773 <= add_ln66_fu_261_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln66_fu_255_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    add_ln76_10_reg_816(9 downto 1) <= add_ln76_10_fu_409_p2(9 downto 1);
                    add_ln76_12_reg_831(9 downto 1) <= add_ln76_12_fu_456_p2(9 downto 1);
                    add_ln76_13_reg_836(9 downto 1) <= add_ln76_13_fu_492_p2(9 downto 1);
                icmp_ln67_reg_778 <= icmp_ln67_fu_273_p2;
                    or_ln76_reg_804(6 downto 3) <= or_ln76_fu_329_p2(6 downto 3);
                output_addr_reg_821 <= zext_ln81_2_fu_421_p1(8 - 1 downto 0);
                    p_cast7_mid2_v_reg_798(6 downto 3) <= p_cast7_mid2_v_fu_321_p3(6 downto 3);
                select_ln76_2_reg_783 <= select_ln76_2_fu_287_p3;
                select_ln81_2_reg_810 <= select_ln81_2_fu_373_p3;
                sub_ln76_reg_788 <= sub_ln76_fu_307_p2;
                y_reg_826 <= y_fu_426_p2;
                    zext_ln76_60_reg_793(4 downto 0) <= zext_ln76_60_fu_313_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln70_fu_498_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln76_16_reg_860 <= add_ln76_16_fu_543_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                c_reg_845 <= c_fu_504_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln70_reg_841 <= icmp_ln70_fu_498_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                icmp_ln895_reg_905 <= icmp_ln895_fu_741_p2;
                select_ln67_reg_910 <= select_ln67_fu_753_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln70_reg_841 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                w_conv1_2_load_reg_895 <= w_conv1_2_q0;
                xor_ln76_96_reg_885 <= xor_ln76_96_fu_574_p2;
                xor_ln76_97_reg_890 <= xor_ln76_97_fu_586_p2;
            end if;
        end if;
    end process;
    zext_ln76_60_reg_793(5) <= '0';
    p_cast7_mid2_v_reg_798(2 downto 0) <= "000";
    or_ln76_reg_804(2 downto 0) <= "111";
    add_ln76_10_reg_816(0) <= '0';
    add_ln76_12_reg_831(0) <= '0';
    add_ln76_13_reg_836(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln66_fu_255_p2, ap_CS_fsm_state2, icmp_ln70_fu_498_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln66_fu_255_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln70_fu_498_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln70_fu_498_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    accum_V_fu_643_p2 <= std_logic_vector(signed(ap_const_lv5_17) + signed(shl_ln_fu_635_p3));
    add_ln66_fu_261_p2 <= std_logic_vector(unsigned(indvar_flatten16_reg_176) + unsigned(ap_const_lv13_1));
    add_ln67_2_fu_747_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(indvar_flatten_reg_198));
    add_ln700_2_fu_629_p2 <= std_logic_vector(unsigned(zext_ln700_32_fu_625_p1) + unsigned(p_014_0_reg_232));
    add_ln700_48_fu_619_p2 <= std_logic_vector(unsigned(zext_ln76_53_fu_592_p1) + unsigned(add_ln700_fu_613_p2));
    add_ln700_fu_613_p2 <= std_logic_vector(unsigned(zext_ln700_fu_609_p1) + unsigned(zext_ln76_54_fu_595_p1));
    add_ln76_10_fu_409_p2 <= std_logic_vector(unsigned(zext_ln76_61_fu_393_p1) + unsigned(zext_ln76_62_fu_405_p1));
    add_ln76_12_fu_456_p2 <= std_logic_vector(unsigned(zext_ln76_63_fu_440_p1) + unsigned(zext_ln76_64_fu_452_p1));
    add_ln76_13_fu_492_p2 <= std_logic_vector(unsigned(zext_ln76_65_fu_476_p1) + unsigned(zext_ln76_66_fu_488_p1));
    add_ln76_14_fu_523_p2 <= std_logic_vector(unsigned(add_ln76_10_reg_816) + unsigned(zext_ln76_67_fu_519_p1));
    add_ln76_15_fu_533_p2 <= std_logic_vector(unsigned(add_ln76_12_reg_831) + unsigned(zext_ln76_67_fu_519_p1));
    add_ln76_16_fu_543_p2 <= std_logic_vector(unsigned(add_ln76_13_reg_836) + unsigned(zext_ln76_67_fu_519_p1));
    add_ln76_17_fu_552_p2 <= std_logic_vector(unsigned(sub_ln76_reg_788) + unsigned(zext_ln76_71_fu_548_p1));
    add_ln76_4_fu_462_p2 <= std_logic_vector(unsigned(ap_const_lv5_2) + unsigned(select_ln81_fu_365_p3));
    add_ln76_fu_514_p2 <= std_logic_vector(unsigned(select_ln81_2_reg_810) + unsigned(zext_ln70_fu_510_p1));
    add_ln81_fu_415_p2 <= std_logic_vector(unsigned(zext_ln81_fu_381_p1) + unsigned(zext_ln76_61_fu_393_p1));
    and_ln76_fu_347_p2 <= (xor_ln76_101_fu_335_p2 and icmp_ln68_fu_341_p2);
    and_ln895_fu_731_p2 <= (lshr_ln895_fu_719_p2 and lshr_ln895_2_fu_725_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln70_fu_498_p2)
    begin
        if ((icmp_ln70_fu_498_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln66_fu_255_p2, ap_CS_fsm_state2)
    begin
        if ((((icmp_ln66_fu_255_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_c_0_phi_fu_248_p4_assign_proc : process(c_0_reg_244, icmp_ln70_reg_841, ap_CS_fsm_pp0_stage0, c_reg_845, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln70_reg_841 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_c_0_phi_fu_248_p4 <= c_reg_845;
        else 
            ap_phi_mux_c_0_phi_fu_248_p4 <= c_0_reg_244;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln66_fu_255_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln66_fu_255_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_fu_504_p2 <= std_logic_vector(unsigned(ap_phi_mux_c_0_phi_fu_248_p4) + unsigned(ap_const_lv2_1));
    icmp_ln66_fu_255_p2 <= "1" when (indvar_flatten16_reg_176 = ap_const_lv13_1000) else "0";
    icmp_ln67_fu_273_p2 <= "1" when (indvar_flatten_reg_198 = ap_const_lv10_100) else "0";
    icmp_ln68_fu_341_p2 <= "1" when (y_0_reg_221 = ap_const_lv5_10) else "0";
    icmp_ln70_fu_498_p2 <= "1" when (ap_phi_mux_c_0_phi_fu_248_p4 = ap_const_lv2_3) else "0";
    icmp_ln895_257_fu_653_p2 <= "1" when (unsigned(p_cast7_mid2_v_reg_798) > unsigned(or_ln76_reg_804)) else "0";
    icmp_ln895_fu_741_p2 <= "1" when (signed(sext_ln895_fu_649_p1) > signed(trunc_ln895_fu_737_p1)) else "0";

    input_r_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, zext_ln76_68_fu_528_p1, zext_ln76_70_fu_564_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                input_r_address0 <= zext_ln76_70_fu_564_p1(9 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                input_r_address0 <= zext_ln76_68_fu_528_p1(9 - 1 downto 0);
            else 
                input_r_address0 <= "XXXXXXXXX";
            end if;
        else 
            input_r_address0 <= "XXXXXXXXX";
        end if; 
    end process;

    input_r_address1 <= zext_ln76_69_fu_538_p1(9 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln895_2_fu_725_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv128_lc_3),to_integer(unsigned('0' & zext_ln895_6_fu_715_p1(31-1 downto 0)))));
    lshr_ln895_fu_719_p2 <= std_logic_vector(shift_right(unsigned(select_ln895_3_fu_689_p3),to_integer(unsigned('0' & zext_ln895_5_fu_711_p1(31-1 downto 0)))));
    n_fu_267_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(n_0_reg_187));
    or_ln76_fu_329_p2 <= (p_cast7_mid2_v_fu_321_p3 or ap_const_lv7_7);
    or_ln81_fu_359_p2 <= (icmp_ln67_fu_273_p2 or and_ln76_fu_347_p2);
    output_r_address0 <= output_addr_reg_821;

    output_r_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    
    output_r_d0_proc : process(output_r_q0, zext_ln76_60_reg_793, icmp_ln895_reg_905)
    begin
        output_r_d0 <= output_r_q0;
        if to_integer(unsigned(zext_ln76_60_reg_793)) >= output_r_q0'low and to_integer(unsigned(zext_ln76_60_reg_793)) <= output_r_q0'high then
            output_r_d0(to_integer(unsigned(zext_ln76_60_reg_793))) <= icmp_ln895_reg_905(0);
        end if;
    end process;


    output_r_we0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_cast7_mid2_v_fu_321_p3 <= (trunc_ln76_fu_317_p1 & ap_const_lv3_0);
    select_ln67_fu_753_p3 <= 
        ap_const_lv10_1 when (icmp_ln67_reg_778(0) = '1') else 
        add_ln67_2_fu_747_p2;
    select_ln76_2_fu_287_p3 <= 
        n_fu_267_p2 when (icmp_ln67_fu_273_p2(0) = '1') else 
        n_0_reg_187;
    select_ln76_fu_279_p3 <= 
        ap_const_lv5_0 when (icmp_ln67_fu_273_p2(0) = '1') else 
        x_0_reg_210;
    select_ln81_2_fu_373_p3 <= 
        x_fu_353_p2 when (and_ln76_fu_347_p2(0) = '1') else 
        select_ln76_fu_279_p3;
    select_ln81_fu_365_p3 <= 
        ap_const_lv5_0 when (or_ln81_fu_359_p2(0) = '1') else 
        y_0_reg_221;
    select_ln895_3_fu_689_p3 <= 
        ap_const_lv128_lc_1 when (icmp_ln895_257_fu_653_p2(0) = '1') else 
        ap_const_lv128_lc_2;
    select_ln895_4_fu_697_p3 <= 
        xor_ln895_fu_669_p2 when (icmp_ln895_257_fu_653_p2(0) = '1') else 
        zext_ln895_fu_657_p1;
    select_ln895_fu_681_p3 <= 
        sub_ln895_fu_663_p2 when (icmp_ln895_257_fu_653_p2(0) = '1') else 
        sub_ln895_3_fu_675_p2;
        sext_ln76_fu_557_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln76_17_fu_552_p2),64));

        sext_ln895_fu_649_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(accum_V_fu_643_p2),8));

    shl_ln_fu_635_p3 <= (p_014_0_reg_232 & ap_const_lv1_0);
    sub_ln76_fu_307_p2 <= std_logic_vector(unsigned(tmp_s_fu_299_p3) - unsigned(zext_ln76_fu_295_p1));
    sub_ln895_3_fu_675_p2 <= std_logic_vector(unsigned(zext_ln895_4_fu_660_p1) - unsigned(zext_ln895_fu_657_p1));
    sub_ln895_4_fu_705_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(select_ln895_fu_681_p3));
    sub_ln895_fu_663_p2 <= std_logic_vector(unsigned(zext_ln895_fu_657_p1) - unsigned(zext_ln895_4_fu_660_p1));
    tmp_26_fu_385_p3 <= (select_ln81_fu_365_p3 & ap_const_lv4_0);
    tmp_27_fu_397_p3 <= (select_ln81_fu_365_p3 & ap_const_lv1_0);
    tmp_28_fu_432_p3 <= (y_fu_426_p2 & ap_const_lv4_0);
    tmp_29_fu_444_p3 <= (y_fu_426_p2 & ap_const_lv1_0);
    tmp_30_fu_468_p3 <= (add_ln76_4_fu_462_p2 & ap_const_lv4_0);
    tmp_31_fu_480_p3 <= (add_ln76_4_fu_462_p2 & ap_const_lv1_0);
    tmp_s_fu_299_p3 <= (select_ln76_2_fu_287_p3 & ap_const_lv2_0);
    trunc_ln76_fu_317_p1 <= select_ln76_2_fu_287_p3(4 - 1 downto 0);
    trunc_ln895_fu_737_p1 <= and_ln895_fu_731_p2(8 - 1 downto 0);
    w_conv1_0_address0 <= sext_ln76_fu_557_p1(6 - 1 downto 0);

    w_conv1_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            w_conv1_0_ce0 <= ap_const_logic_1;
        else 
            w_conv1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    w_conv1_1_address0 <= sext_ln76_fu_557_p1(6 - 1 downto 0);

    w_conv1_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            w_conv1_1_ce0 <= ap_const_logic_1;
        else 
            w_conv1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    w_conv1_2_address0 <= sext_ln76_fu_557_p1(6 - 1 downto 0);

    w_conv1_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            w_conv1_2_ce0 <= ap_const_logic_1;
        else 
            w_conv1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_fu_353_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(select_ln76_fu_279_p3));
    xor_ln76_100_fu_598_p2 <= (w_conv1_2_load_reg_895 xor ap_const_lv1_1);
    xor_ln76_101_fu_335_p2 <= (icmp_ln67_fu_273_p2 xor ap_const_lv1_1);
    xor_ln76_96_fu_574_p2 <= (xor_ln76_fu_568_p2 xor input_r_q0);
    xor_ln76_97_fu_586_p2 <= (xor_ln76_99_fu_580_p2 xor input_r_q1);
    xor_ln76_98_fu_603_p2 <= (xor_ln76_100_fu_598_p2 xor input_r_q0);
    xor_ln76_99_fu_580_p2 <= (w_conv1_1_q0 xor ap_const_lv1_1);
    xor_ln76_fu_568_p2 <= (w_conv1_0_q0 xor ap_const_lv1_1);
    xor_ln895_fu_669_p2 <= (zext_ln895_fu_657_p1 xor ap_const_lv8_7F);
    y_fu_426_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(select_ln81_fu_365_p3));
    zext_ln700_32_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln700_48_fu_619_p2),4));
    zext_ln700_fu_609_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln76_98_fu_603_p2),2));
    zext_ln70_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_c_0_phi_fu_248_p4),5));
    zext_ln76_53_fu_592_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln76_96_reg_885),2));
    zext_ln76_54_fu_595_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln76_97_reg_890),2));
    zext_ln76_60_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln76_2_fu_287_p3),6));
    zext_ln76_61_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_fu_385_p3),10));
    zext_ln76_62_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_27_fu_397_p3),10));
    zext_ln76_63_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_28_fu_432_p3),10));
    zext_ln76_64_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_29_fu_444_p3),10));
    zext_ln76_65_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_30_fu_468_p3),10));
    zext_ln76_66_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_fu_480_p3),10));
    zext_ln76_67_fu_519_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln76_fu_514_p2),10));
    zext_ln76_68_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln76_14_fu_523_p2),64));
    zext_ln76_69_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln76_15_fu_533_p2),64));
    zext_ln76_70_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln76_16_reg_860),64));
    zext_ln76_71_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_c_0_phi_fu_248_p4),7));
    zext_ln76_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln76_2_fu_287_p3),7));
    zext_ln81_2_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln81_fu_415_p2),64));
    zext_ln81_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln81_2_fu_373_p3),10));
    zext_ln895_4_fu_660_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln76_reg_804),8));
    zext_ln895_5_fu_711_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln895_4_fu_697_p3),128));
    zext_ln895_6_fu_715_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln895_4_fu_705_p2),128));
    zext_ln895_fu_657_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_cast7_mid2_v_reg_798),8));
end behav;
