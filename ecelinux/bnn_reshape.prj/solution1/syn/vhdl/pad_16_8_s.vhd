-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pad_16_8_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of pad_16_8_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal m_fu_113_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal m_reg_237 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln27_fu_119_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln27_reg_242 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln22_fu_107_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_fu_129_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal x_reg_251 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln27_1_fu_135_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln27_1_reg_256 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln24_fu_123_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln26_fu_139_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln26_reg_261 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_fu_149_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal y_reg_269 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln26_fu_143_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_addr_reg_279 : STD_LOGIC_VECTOR (6 downto 0);
    signal m_0_reg_74 : STD_LOGIC_VECTOR (4 downto 0);
    signal x_0_reg_85 : STD_LOGIC_VECTOR (3 downto 0);
    signal y_0_reg_96 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln27_3_fu_172_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_6_fu_212_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_155_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln27_2_fu_163_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln27_fu_167_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_177_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_6_fu_189_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln27_5_fu_197_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln27_4_fu_185_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln27_2_fu_201_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln27_3_fu_207_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_217_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    m_0_reg_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_123_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                m_0_reg_74 <= m_reg_237;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                m_0_reg_74 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    x_0_reg_85_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_fu_143_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                x_0_reg_85 <= x_reg_251;
            elsif (((icmp_ln22_fu_107_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                x_0_reg_85 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    y_0_reg_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                y_0_reg_96 <= y_reg_269;
            elsif (((icmp_ln24_fu_123_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                y_0_reg_96 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                m_reg_237 <= m_fu_113_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_fu_143_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                output_addr_reg_279 <= zext_ln27_6_fu_212_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                x_reg_251 <= x_fu_129_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                y_reg_269 <= y_fu_149_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_123_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    zext_ln26_reg_261(3 downto 0) <= zext_ln26_fu_139_p1(3 downto 0);
                    zext_ln27_1_reg_256(3 downto 0) <= zext_ln27_1_fu_135_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_fu_107_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln27_reg_242(4 downto 0) <= zext_ln27_fu_119_p1(4 downto 0);
            end if;
        end if;
    end process;
    zext_ln27_reg_242(5) <= '0';
    zext_ln27_1_reg_256(7 downto 4) <= "0000";
    zext_ln26_reg_261(7 downto 4) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln22_fu_107_p2, ap_CS_fsm_state3, icmp_ln24_fu_123_p2, ap_CS_fsm_state4, icmp_ln26_fu_143_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln22_fu_107_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln24_fu_123_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln26_fu_143_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln27_2_fu_201_p2 <= std_logic_vector(unsigned(zext_ln27_5_fu_197_p1) + unsigned(zext_ln27_4_fu_185_p1));
    add_ln27_3_fu_207_p2 <= std_logic_vector(unsigned(add_ln27_2_fu_201_p2) + unsigned(zext_ln26_reg_261));
    add_ln27_fu_167_p2 <= std_logic_vector(unsigned(zext_ln27_2_fu_163_p1) + unsigned(zext_ln27_1_reg_256));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln22_fu_107_p2)
    begin
        if ((((icmp_ln22_fu_107_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln22_fu_107_p2)
    begin
        if (((icmp_ln22_fu_107_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln22_fu_107_p2 <= "1" when (m_0_reg_74 = ap_const_lv5_10) else "0";
    icmp_ln24_fu_123_p2 <= "1" when (x_0_reg_85 = ap_const_lv4_8) else "0";
    icmp_ln26_fu_143_p2 <= "1" when (y_0_reg_96 = ap_const_lv4_8) else "0";
    input_r_address0 <= zext_ln27_3_fu_172_p1(6 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m_fu_113_p2 <= std_logic_vector(unsigned(m_0_reg_74) + unsigned(ap_const_lv5_1));

    output_r_address0_assign_proc : process(ap_CS_fsm_state4, output_addr_reg_279, ap_CS_fsm_state5, zext_ln27_6_fu_212_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_r_address0 <= output_addr_reg_279;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output_r_address0 <= zext_ln27_6_fu_212_p1(7 - 1 downto 0);
        else 
            output_r_address0 <= "XXXXXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    
    output_r_d0_proc : process(output_r_q0, zext_ln27_reg_242, tmp_2_fu_217_p3)
    begin
        output_r_d0 <= output_r_q0;
        if to_integer(unsigned(zext_ln27_reg_242)) >= output_r_q0'low and to_integer(unsigned(zext_ln27_reg_242)) <= output_r_q0'high then
            output_r_d0(to_integer(unsigned(zext_ln27_reg_242))) <= tmp_2_fu_217_p3(0);
        end if;
    end process;


    output_r_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_2_fu_217_p3 <= input_r_q0(to_integer(unsigned(zext_ln27_reg_242)) downto to_integer(unsigned(zext_ln27_reg_242))) when (to_integer(unsigned(zext_ln27_reg_242))>= 0 and to_integer(unsigned(zext_ln27_reg_242))<=15) else "-";
    tmp_4_fu_155_p3 <= (y_0_reg_96 & ap_const_lv3_0);
    tmp_5_fu_177_p3 <= (y_fu_149_p2 & ap_const_lv3_0);
    tmp_6_fu_189_p3 <= (y_fu_149_p2 & ap_const_lv1_0);
    x_fu_129_p2 <= std_logic_vector(unsigned(x_0_reg_85) + unsigned(ap_const_lv4_1));
    y_fu_149_p2 <= std_logic_vector(unsigned(y_0_reg_96) + unsigned(ap_const_lv4_1));
    zext_ln26_fu_139_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_fu_129_p2),8));
    zext_ln27_1_fu_135_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_0_reg_85),8));
    zext_ln27_2_fu_163_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_155_p3),8));
    zext_ln27_3_fu_172_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln27_fu_167_p2),64));
    zext_ln27_4_fu_185_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_177_p3),8));
    zext_ln27_5_fu_197_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_189_p3),8));
    zext_ln27_6_fu_212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln27_3_fu_207_p2),64));
    zext_ln27_fu_119_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_0_reg_74),6));
end behav;
